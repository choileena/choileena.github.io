{
  "articles": [
    {
      "path": "about.html",
      "title": "About This Site",
      "description": "Some additional details about the website.\n",
      "author": [],
      "contents": "\n\nContents\nMore Information\n\nNote:\nAs this package is still in active development, we recommend installing from our GitHub repository with the following command: devtools::install_github(‘choileena/EHR/EHR/’)\nMore Information\nMore information about the EHRtoPKPD can be found at the following sites:\nhttps://github.com/choileena\nhttps://github.com/choileena/EHR\nhttps://github.com/choileena/pkdata\nhttps://github.com/choileena/medExtractR\n\n\n\n",
      "last_modified": "2021-10-04T14:47:28-05:00"
    },
    {
      "path": "Build-PK-IV-comprehensive.html",
      "title": "Build-PK-IV - Comprehensive",
      "description": "This tutorial describes a comprehensive PK data building procedure for medications that are intravenously administered. There are two phases: data processing which standardizes and combines the input data (*Pro-Demographic*, *Pro-Med-Str*, *Pro-Drug Level*, *Pro-Laboratory*) and data building which creates the final PK data (*Build-PK-IV*).\n",
      "author": [
        {
          "name": "Nathan T. James",
          "url": {}
        }
      ],
      "contents": "\n\nContents\nIntroduction\nPre-Processing for Raw Extracted Data(1) Read and clean raw data\n(2) Merge data to create new ID variables\n(3) Make new data for use with modules\n\nPro-Demographic\nPro-Med-Str Part I: IV dose data\nPro-Drug Level\nPro-Laboratory\nBuild-PK-IV\nReferences\n\nSee also “Example 2: Complete Data Processing and Building from Raw Extracted Data to PK Data” in “2. EHR Vignette for Structured Data” of EHR package.\nIntroduction\nThis tutorial describes four modules for processing data (Pro-Demographic, Pro-Med-Str, Pro-Drug Level, Pro-Laboratory) and one module for PK data building (Build-PK-IV) using data extracted from a structured database.\nTo begin we load the EHR package, the pkdata package, and the lubridate package.\n\n\n# load EHR package and dependencies\nlibrary(EHR)\nlibrary(pkdata)\nlibrary(lubridate)\n\n\n\nWe first define three directories:\none for raw structured data\none containing files used for interactive checking\none for processed data.\n\nThere are 4 types of raw data expected to exist in the raw data directory (i.e., rawDataDir below):\na demographic file for use with the Pro-Demographic module (Demographics_DATA.csv)\ntwo files for the Pro-Drug Level module (SampleTimes_DATA.csv and SampleConcentration_DATA.csv)\ntwo dosing files for the Pro-Med-Str module (FLOW_DATA.csv and MAR_DATA.csv)\ntwo lab files for use with the Pro-Laboratory module (Creatinine_DATA.csv and Albumin_DATA.csv).\n\n\n\n# define 3 directories\nrawDataDir <- system.file(\"examples\", \"str_ex2\", package=\"EHR\") # directory for raw data\n\ntd <- tempdir()\ncheckDir <- file.path(td, 'checks') # directory for interactive checking\ndir.create(checkDir)\n\ndataDir <- file.path(td, 'data') # directory for processed data\ndir.create(dataDir)\n\n# examine raw data files in rawDataDir\ndir(rawDataDir)\n\n\n[1] \"Albumin_DATA.csv\"             \"Creatinine_DATA.csv\"          \"Demographics_DATA.csv\"        \"e-rx_DATA.csv\"               \n[5] \"FLOW_DATA.csv\"                \"MAR_DATA.csv\"                 \"medChecked-fent.csv\"          \"SampleConcentration_DATA.csv\"\n[9] \"SampleTimes_DATA.csv\"        \n\nPre-Processing for Raw Extracted Data\nThe raw datasets must go through a pre-processing stage which creates new ID variables and datasets that can be used by the data processing modules. There are three pre-processing steps:\nread and clean raw data\nmerge raw data to create new ID variables\nmake new data for use with modules.\nEach raw dataset should contain a subject unique ID, a subject visit ID, or both ids. In this example the subject unique ID is called subject_uid and the subject visit ID is called subject_id. The subject visit ID is a combination of subject and visit/course – e.g., subject_id 14.0 is the first course for subject 14, subject_id 14.1 is the second course for subject 14, and so on. subject_uid is a unique ID that is the same for all subject records. The integer part of subject_id has a 1-to-1 correspondence with subject_uid – for this example, subject_uid 62734832 is associated with both subject_id 14.0 and subject_id 14.1. If there is only a single visit/course per subject only the subject unique ID is needed.\n(1) Read and clean raw data\nreadTransform(): This function reads in a CSV file and makes optional modifications to the resulting dataframe.\nDemographics raw data\nThe example demographics data file contains ID variables subject_id and subject_uid, in addition to demographic variables such as gender, date of birth, height, weight, etc. As subject_id and subject_uid already exist, no further cleaning is needed.\nThe Demographics_DATA.csv file is read in using the readTransform() function.\n\n\n\n# demographics data\n# demographics data\ndemo.in <- readTransform(file.path(rawDataDir, \"Demographics_DATA.csv\"))\n# pre-process the demographic data \n# date.time variable is expected in demographic data\n# if date.time variable is not already in the demographic data, it can be generated \n# using other variables as in this example\nz1 <- EHR:::fixDates(demo.in[, 'surgery_date'])\nz2 <- sub(\"^([0-9]{2})([0-9]{2})$\", \"\\\\1:\\\\2\", sprintf(\"%04d\", demo.in[,\n'time_fromor']))\ndemo.in[,'date.time'] <- pkdata::parse_dates(paste(z1, z2))\n\n\n\nConcentration raw data\nThe example concentration data consists of two files:\nSampleTimes_DATA.csv: contains the concentration sampling times\n\nSampleConcentration_DATA.csv: contains the concentration measurements\n\n\nIf all concentration data is in one file, the user should transform the file so it contains a subject unique ID, a subject visit ID, or both ids.\nUse the function readTransform()\nto read SampleTimes_DATA.csv, and rename the variable Study.ID to subject_id and create a new variable called samp, which indexes the sample number, using the modify= argument.\nto read SampleConcentration_DATA.csv, and transform the concentration values - we use the helper function sampId() to process the subject_id field.\n\n\n\n\n# read SampleTimes_DATA.csv\nsamp.in <- readTransform(file.path(rawDataDir, \"SampleTimes_DATA.csv\"),\n    rename = c('Study.ID' = 'subject_id'),\n    modify = list(samp = expression(as.numeric(sub('Sample ', '', Event.Name)))))\nhead(samp.in)\n\n\n  subject_id Event.Name Sample.Collection.Date.and.Time samp\n1      466.1   Sample 1                  2/3/2017 10:46    1\n2      466.1   Sample 2                  2/4/2017 20:30    2\n3     1106.0   Sample 1                 6/28/2014 13:40    1\n4     1106.0   Sample 2                 6/29/2014 03:10    2\n5     1106.0   Sample 3                 6/30/2014 03:35    3\n6     1106.0   Sample 4                  7/1/2014 03:45    4\n\n\n\n# helper function used to make subject_id\nsampId <- function(x) {\n  # remove leading zeroes or trailing periods\n  subid <- gsub('(^0*|\\\\.$)', '', x)\n  # change _ to .\n  gsub('_([0-9]+[_].*)$', '.\\\\1', subid)\n}\n\n# read SampleConcentration_DATA.csv\nconc.in <- readTransform(file.path(rawDataDir, \"SampleConcentration_DATA.csv\"),\n  modify = list(\n    subid = expression(sampId(name)),\n    subject_id = expression(as.numeric(sub('[_].*', '', subid))),\n    samp = expression(sub('[^_]*[_]', '', subid)),\n    name = NULL,\n    data_file = NULL,\n    subid = NULL\n    )\n  )\nhead(conc.in)\n\n\n  record_id fentanyl_calc_conc subject_id samp\n1         1         0.01413622      466.1    1\n2         2         0.27982075      466.1    2\n3         3         6.11873679     1106.0    1\n4         4         0.59161716     1106.0    2\n5         5         0.11280471     1106.0    3\n6         6         0.02112153     1106.0    4\n\nDosing raw data\nThe example drug dosing data consists of two files containing two sources of IV dose information:\nFLOW_DATA.csv: contains aliases for both ID variables, and it is read in with the readTransform() function which renames the variables Subject.Id to subject_id and Subject.Uniq.Id to subject_uid.\n\nMAR_DATA.csv: contains several variables with a colon (:) character. To preserve the colon in these variable names, the data can be read in without checking for syntactically valid R variable names. The data is read in using read.csv() with the argument check.names = FALSE and then passed to the dataTransformation() function which renames Uniq.Id to subject_uid.\n\n\nIf all dosing data is in one file, the user should transform the file so it contains a subject unique ID, a subject visit ID, or both ids.\n\n\n\n# FLOW dosing data\nflow.in <- readTransform(file.path(rawDataDir, \"FLOW_DATA.csv\"),\n                         rename = c('Subject.Id' = 'subject_id',\n                                    'Subject.Uniq.Id' = 'subject_uid')) \n# pre-process the flow data \n# date.time variable should be in an appropriate form\nflow.in[,'date.time'] <- pkdata::parse_dates(EHR:::fixDates(flow.in[,'Perform.Date']))\n# unit and rate are required: separate unit and rate from 'Final.Rate..NFR.units.' if needed\nflow.in[,'unit'] <- sub('.*[ ]', '', flow.in[,'Final.Rate..NFR.units.'])\nflow.in[,'rate'] <- as.numeric(sub('([0-9.]+).*', '\\\\1', flow.in[,'Final.Rate..NFR.units.']))\nhead(flow.in)\n\n\n  subject_id subject_uid     Perform.Date FOCUS_MEDNAME Final.Wt..kg. Final.Rate..NFR.units. Final.Units Flow           date.time      unit\n1       1596    38340814   12/4/2016 5:30      Fentanyl          6.75            1 mcg/kg/hr       3.375   NA 2016-12-04 05:30:00 mcg/kg/hr\n2       1596    38340814   12/4/2016 6:00      Fentanyl          6.75            1 mcg/kg/hr       6.750  0.1 2016-12-04 06:00:00 mcg/kg/hr\n3       1596    38340814   12/4/2016 7:00      Fentanyl          6.75            1 mcg/kg/hr       4.500  0.1 2016-12-04 07:00:00 mcg/kg/hr\n4       1596    38340814   12/4/2016 7:40      Fentanyl          6.75            0 mcg/kg/hr       0.000   NA 2016-12-04 07:40:00 mcg/kg/hr\n5       1607    38551767 12/24/2016 19:30      Fentanyl          2.60            2 mcg/kg/hr       2.600   NA 2016-12-24 19:30:00 mcg/kg/hr\n6       1607    38551767 12/24/2016 20:00      Fentanyl          2.60            2 mcg/kg/hr       5.200  0.2 2016-12-24 20:00:00 mcg/kg/hr\n  rate\n1    1\n2    1\n3    1\n4    0\n5    2\n6    2\n\n\n\n# MAR dosing data\nmar.in0 <- read.csv(file.path(rawDataDir, \"MAR_DATA.csv\"), check.names = FALSE)\nmar.in <- dataTransformation(mar.in0, rename = c('Uniq.Id' = 'subject_uid'))\nhead(mar.in)\n\n\n  subject_uid       Date  Time                 med:mDrug   med:dosage med:route med:freq med:given\n1    28579217 2017-02-04 19:15               Nicardipine 3 mcg/kg/min        IV     <NA>     Given\n2    28579217 2011-10-02 22:11                Famotidine       4.5 mg        IV   q12hrs     Given\n3    28579217 2011-10-02 20:17          Morphine sulfate         1 mg        IV  q2h prn     Given\n4    28579217 2011-10-03 02:28 Diphenhydramine injection        12 mg        IV      now     Given\n5    28579217 2011-10-02 22:11                 Cefazolin       225 mg        IV    q8hrs     Given\n6    28579217 2011-10-02 23:30          Morphine sulfate         1 mg        IV  q2h prn     Given\n\nLaboratory raw data\nThe example laboratory data consists of files two files, Creatinine_DATA.csv and Albumin_DATA.csv. Both files are read in using the readTransform() function and Subject.uniq is renamed to subject_uid.\nEach laboratory file should be transformed so it contains a subject unique ID, a subject visit ID, or both ids.\n\n\n\n# Serum creatinine lab data\ncreat.in <- readTransform(file.path(rawDataDir, \"Creatinine_DATA.csv\"),\n    rename = c('Subject.uniq' = 'subject_uid'))\nhead(creat.in)\n\n\n  subject_uid     date time creat\n1    28579217 02/05/17 4:00  0.52\n2    28579217 02/06/17 5:00  0.53\n3    28579217 10/03/11 4:28  0.42\n4    28579217 10/04/11 4:15  0.35\n5    28579217 10/06/11 4:25  0.29\n6    28579217 10/09/11 4:45  0.28\n\n# Albumin lab data\nalb.in <- readTransform(file.path(rawDataDir, \"Albumin_DATA.csv\"),\n    rename = c('Subject.uniq' = 'subject_uid'))\nhead(creat.in)\n\n\n  subject_uid     date time creat\n1    28579217 02/05/17 4:00  0.52\n2    28579217 02/06/17 5:00  0.53\n3    28579217 10/03/11 4:28  0.42\n4    28579217 10/04/11 4:15  0.35\n5    28579217 10/06/11 4:25  0.29\n6    28579217 10/09/11 4:45  0.28\n\n(2) Merge data to create new ID variables\nidCrosswalk(): This function merges all of the cleaned input datasets and creates new IDs.\nInput:\nthe data= argument of this function accepts a list of input datasets\nthe idcols= argument accepts a list of vectors or character strings that identify the ID variables in the corresponding input dataset.\n\nOutput:\na crosswalk dataset between the original ID variables (subject_id, subject_uid) and the new ID variables (mod_id, mod_visit, and mod_id_visit).\nthe new variable mod_id_visit has a 1-to-1 correspondence to variable subject_id and uniquely identifies each subjects’ visit/course; the new variable mod_id has a 1-to-1 correspondence to variable subject_uid and uniquely identifies each subject.\n\n\n\n\n# define list of input datasets\ndata <-  list(demo.in,\n              samp.in,\n              conc.in,\n              flow.in,\n              mar.in,\n              creat.in,\n              alb.in)\n\n# define list of vectors or character strings that identify the ID variables\nidcols <-  list(c('subject_id', 'subject_uid'), # id vars in demo.in\n                'subject_id', # id var in samp.in\n                'subject_id', # id var in conc.in\n                c('subject_id', 'subject_uid'), # id vars in flow.in\n                'subject_uid', # id var in mar.in\n                'subject_uid', # id var in creat.in\n                'subject_uid') # id var in creat.in\n\n# merge all IDs from cleaned datasets and create new ID variables\nid.xwalk <- idCrosswalk(data, idcols, visit.id=\"subject_id\", uniq.id=\"subject_uid\")\nsaveRDS(id.xwalk, file=file.path(dataDir,\"module_id_xwalk.rds\"))\nhead(id.xwalk)\n\n\n  subject_id subject_uid mod_visit mod_id mod_id_visit\n1      466.0    28579217         1      1          1.1\n2      466.1    28579217         2      1          1.2\n3     1106.0    34364670         1      2          2.1\n4     1444.0    36792472         1      3          3.1\n5     1465.0    36292449         1      4          4.1\n6     1520.0    34161967         1      5          5.1\n\n(3) Make new data for use with modules\n\n\npullFakeId(dat, xwalk, firstCols = NULL, orderBy = NULL)\n\n\n\npullFakeId(): This function replaces the original IDs – subject_id and subject_uid – with new IDs – mod_id, mod_visit, and mod_id_visit – to create datasets which can be used by the data processing modules.\nThe dat= argument should contain the cleaned input data.frame from pre-processing step (1).\nThe xwalk= argument should contain the crosswalk data.frame produced in step (2).\nAdditional arguments firstCols= and orderBy= control which variables are in the first columns of the output and the sort order, respectively.\nThe cleaned, structured data are saved as R objects for use with the modules.\n\n\n\n## demographics data\ndemo.cln <- pullFakeId(demo.in, id.xwalk,\n    firstCols = c('mod_id', 'mod_visit', 'mod_id_visit'),\n    uniq.id = 'subject_uid')\nhead(demo.cln)\n\n\n  mod_id mod_visit mod_id_visit gender weight height surgery_date ageatsurgery stat_sts cpb_sts in_hospital_mortality add_ecmo date_icu_dc\n1      2         1          2.1      0   5.14  59.18    6/28/2014          141        3     133                     0        0    7/2/2014\n2      3         1          3.1      1   5.67  62.90    1/10/2016          292        1      65                     0        0   1/12/2016\n3      4         1          4.1      0  23.67 118.02    3/19/2016         2591        2     357                     0        0   3/20/2016\n4      5         1          5.1      0  14.07  97.04    7/18/2016         1320        5      93                     0        0   7/19/2016\n5      6         1          6.1      1  23.40 102.80    7/23/2016         1561        3      87                     1        0   7/30/2016\n6      7         1          7.1      1   6.21  62.03     9/4/2016          208        1     203                     0        0   9/11/2016\n  time_fromor           date.time\n1        1657 2014-06-28 16:57:00\n2        1325 2016-01-10 13:25:00\n3          NA                <NA>\n4        1745 2016-07-18 17:45:00\n5        1847 2016-07-23 18:47:00\n6        1210 2016-09-04 12:10:00\n\nsaveRDS(demo.cln, file=file.path(dataDir,\"demo_mod_id.rds\"))\n\n## drug level data\n# sampling times\nsamp.cln <- pullFakeId(samp.in, id.xwalk,\n    firstCols = c('mod_id', 'mod_visit', 'mod_id_visit', 'samp'), \n    orderBy = c('mod_id_visit','samp'),\n    uniq.id = 'subject_uid')\nhead(samp.cln)\n\n\n  mod_id mod_visit mod_id_visit samp Event.Name Sample.Collection.Date.and.Time\n1      1         2          1.2    1   Sample 1                  2/3/2017 10:46\n2      1         2          1.2    2   Sample 2                  2/4/2017 20:30\n3     10         1         10.1    1   Sample 1                12/23/2016 05:15\n4     10         1         10.1    2   Sample 2                12/24/2016 18:00\n5     10         1         10.1    3   Sample 3                12/25/2016 03:00\n6     10         1         10.1    4   Sample 4                12/26/2016 04:00\n\nsaveRDS(samp.cln, file=file.path(dataDir,\"samp_mod_id.rds\"))\n\n# drug concentration measurements\nconc.cln <- pullFakeId(conc.in, id.xwalk,\n    firstCols = c('record_id', 'mod_id', 'mod_visit', 'mod_id_visit', 'samp'),\n    orderBy = 'record_id',\n    uniq.id = 'subject_uid')\nhead(conc.cln)\n\n\n  record_id mod_id mod_visit mod_id_visit samp fentanyl_calc_conc\n1         1      1         2          1.2    1         0.01413622\n2         2      1         2          1.2    2         0.27982075\n3         3      2         1          2.1    1         6.11873679\n4         4      2         1          2.1    2         0.59161716\n5         5      2         1          2.1    3         0.11280471\n6         6      2         1          2.1    4         0.02112153\n\nsaveRDS(conc.cln, file=file.path(dataDir,\"conc_mod_id.rds\"))\n\n## dosing data\n# flow\nflow.cln <- pullFakeId(flow.in, id.xwalk,\n    firstCols = c('mod_id', 'mod_visit', 'mod_id_visit'),\n    uniq.id = 'subject_uid')\nhead(flow.cln)\n\n\n  mod_id mod_visit mod_id_visit     Perform.Date FOCUS_MEDNAME Final.Wt..kg. Final.Rate..NFR.units. Final.Units Flow           date.time\n1      9         1          9.1   12/4/2016 5:30      Fentanyl          6.75            1 mcg/kg/hr       3.375   NA 2016-12-04 05:30:00\n2      9         1          9.1   12/4/2016 6:00      Fentanyl          6.75            1 mcg/kg/hr       6.750  0.1 2016-12-04 06:00:00\n3      9         1          9.1   12/4/2016 7:00      Fentanyl          6.75            1 mcg/kg/hr       4.500  0.1 2016-12-04 07:00:00\n4      9         1          9.1   12/4/2016 7:40      Fentanyl          6.75            0 mcg/kg/hr       0.000   NA 2016-12-04 07:40:00\n5     10         1         10.1 12/24/2016 19:30      Fentanyl          2.60            2 mcg/kg/hr       2.600   NA 2016-12-24 19:30:00\n6     10         1         10.1 12/24/2016 20:00      Fentanyl          2.60            2 mcg/kg/hr       5.200  0.2 2016-12-24 20:00:00\n       unit rate\n1 mcg/kg/hr    1\n2 mcg/kg/hr    1\n3 mcg/kg/hr    1\n4 mcg/kg/hr    0\n5 mcg/kg/hr    2\n6 mcg/kg/hr    2\n\nsaveRDS(flow.cln, file=file.path(dataDir,\"flow_mod_id.rds\"))\n\n# mar\nmar.cln <- pullFakeId(mar.in, id.xwalk, firstCols = 'mod_id', uniq.id = 'subject_uid')\nhead(mar.cln)\n\n\n  mod_id       Date  Time                 med:mDrug   med:dosage med:route med:freq med:given\n1      1 2017-02-04 19:15               Nicardipine 3 mcg/kg/min        IV     <NA>     Given\n2      1 2011-10-02 22:11                Famotidine       4.5 mg        IV   q12hrs     Given\n3      1 2011-10-02 20:17          Morphine sulfate         1 mg        IV  q2h prn     Given\n4      1 2011-10-03 02:28 Diphenhydramine injection        12 mg        IV      now     Given\n5      1 2011-10-02 22:11                 Cefazolin       225 mg        IV    q8hrs     Given\n6      1 2011-10-02 23:30          Morphine sulfate         1 mg        IV  q2h prn     Given\n\nsaveRDS(mar.cln, file=file.path(dataDir,\"mar_mod_id.rds\"))\n\n## laboratory data\n# creatinine\ncreat.cln <- pullFakeId(creat.in, id.xwalk, 'mod_id',uniq.id = 'subject_uid')\nhead(creat.cln)\n\n\n  mod_id     date time creat\n1      1 02/05/17 4:00  0.52\n2      1 02/06/17 5:00  0.53\n3      1 10/03/11 4:28  0.42\n4      1 10/04/11 4:15  0.35\n5      1 10/06/11 4:25  0.29\n6      1 10/09/11 4:45  0.28\n\nsaveRDS(creat.cln, file=file.path(dataDir,\"creat_mod_id.rds\"))\n\n# albumin\nalb.cln <- pullFakeId(alb.in, id.xwalk, 'mod_id', uniq.id = 'subject_uid')\nhead(alb.cln)\n\n\n  mod_id     date  time alb\n1      8 07/30/20  5:23 2.9\n2      8 07/28/20  3:12 2.0\n3      8 07/29/20  1:39 2.7\n4      8 08/21/20 10:35 4.1\n5      4 06/13/15 17:20 4.1\n6      6 07/25/16  8:35 2.3\n\nsaveRDS(alb.cln, file=file.path(dataDir,\"alb_mod_id.rds\"))\n\n\n\nOptions and parameters: Before running the processing modules, it is necessary to define several options and parameters.\nUsing options(pkxwalk =) allows the modules to access the crosswalk file.\nCreate a drugname stub.\nDefine the lower limit of quantification (LLOQ) for the drug concentration if applicable.\n\n\n\n# set crosswalk option \nxwalk <- readRDS(file.path(dataDir, \"module_id_xwalk.rds\"))\noptions(pkxwalk = 'xwalk')\n\n# define parameters\ndrugname <- 'fent'\nLLOQ <- 0.05\n\n\n\nPro-Demographic\nThis module accepts the cleaned structured demographic dataset and a user-defined set of exclusion criteria and returns a formatted list with the demographic data and records meeting the exclusion criteria suitable for integration with the other modules.\nFor this example, we exclude subjects with a value of 1 for in_hospital_mortality or add_ecmo and create a new variable called length_of_icu_stay.\nrun_Demo() is the function to run this module.\n\n\n# helper function\nexclude_val <- function(x, val=1) { !is.na(x) & x == val }\n\ndemo.out <- run_Demo(demo.path = file.path(dataDir, \"demo_mod_id.rds\"),\n    toexclude = expression(exclude_val(in_hospital_mortality) | exclude_val(add_ecmo)),\n    demo.mod.list = list(length_of_icu_stay = \n                        expression(daysDiff(surgery_date, date_icu_dc))))\n\n\nThe number of subjects in the demographic data, who meet the exclusion criteria: 2\n\nhead(demo.out$demo)\n\n\n  mod_id mod_visit mod_id_visit gender weight height surgery_date ageatsurgery stat_sts cpb_sts in_hospital_mortality add_ecmo date_icu_dc\n1      2         1          2.1      0   5.14  59.18    6/28/2014          141        3     133                     0        0    7/2/2014\n2      3         1          3.1      1   5.67  62.90    1/10/2016          292        1      65                     0        0   1/12/2016\n3      4         1          4.1      0  23.67 118.02    3/19/2016         2591        2     357                     0        0   3/20/2016\n4      5         1          5.1      0  14.07  97.04    7/18/2016         1320        5      93                     0        0   7/19/2016\n5      6         1          6.1      1  23.40 102.80    7/23/2016         1561        3      87                     1        0   7/30/2016\n6      7         1          7.1      1   6.21  62.03     9/4/2016          208        1     203                     0        0   9/11/2016\n  time_fromor           date.time length_of_icu_stay\n1        1657 2014-06-28 16:57:00                  4\n2        1325 2016-01-10 13:25:00                  2\n3          NA                <NA>                  1\n4        1745 2016-07-18 17:45:00                  1\n5        1847 2016-07-23 18:47:00                  7\n6        1210 2016-09-04 12:10:00                  7\n\ndemo.out$exclude\n\n\n[1] \"6.1\"  \"13.1\"\n\nPro-Med-Str Part I: IV dose data\nThis module processes structured medication data. Only Part I which handles IV dose data is described here. For processing structure e-prescription medication data, see Pro-Med-Str - Part II.\nThe IV dose data comes from two sources:\nFlow data: patient flow sheets which at this institution record infusion rates and changes to all infusions for all inpatients outside of the operating room.\nMedication Administration Records (MAR) data: This data record all bolus doses of medications and infusions administered in the operating room.\n\nThe module is semi-interactive – it generates several files to check potential data errors and get feedback from an investigator. If corrected information (‘fix’ files) are provided, the module should be re-run to incorporate the corrections.\nrun_MedStrI() is the function to process IV dose data.\n\n\nivdose.out <- run_MedStrI(\n    mar.path=file.path(dataDir,\"mar_mod_id.rds\"),\n    mar.columns = list(id='mod_id', datetime=c('Date','Time'), dose='med:dosage', drug='med:mDrug', given='med:given'),\n    medGivenReq = TRUE,\n    flow.path=file.path(dataDir,\"flow_mod_id.rds\"),\n    flow.columns = list(id = 'mod_id', datetime = 'date.time', finalunits = 'Final.Units', \n                        unit = 'unit', rate = 'rate', weight = 'Final.Wt..kg.'),\n    medchk.path=file.path(system.file(\"examples\", \"str_ex2\", package=\"EHR\"), sprintf('medChecked-%s.csv', drugname)),\n    demo.list = NULL,\n    demo.columns = list(),\n    missing.wgt.path = NULL,\n    wgt.columns = list(),\n    check.path = checkDir,\n    failflow_fn = 'FailFlow',\n    failunit_fn = 'Unit',\n    failnowgt_fn = 'NoWgt',\n    infusion.unit = 'mcg/kg/hr',\n    bolus.unit = 'mcg',\n    bol.rate.thresh = Inf,\n    rateunit = 'mcg/hr',\n    ratewgtunit = 'mcg/kg/hr',\n    weightunit = 'kg',\n    drugname = drugname)\n\n\nThe number of rows in the original data                124\nThe number of rows after removing the duplicates       124\nno units other than mcg/kg/hr or mcg, file /var/folders/06/0qv1dr5508j_tbzqdjfqjf680000gn/T//RtmpwgVAz4/checks/failUnit-fent.csv not created\n#########################\n33 rows from 1 subjects with \"kg\" in infusion unit but missing weight, see file /var/folders/06/0qv1dr5508j_tbzqdjfqjf680000gn/T//RtmpwgVAz4/checks/failNoWgt-fent.csv AND create /var/folders/06/0qv1dr5508j_tbzqdjfqjf680000gn/T//RtmpwgVAz4/checks/fixNoWgt-fent.csv\n#########################\n\nhead(ivdose.out)\n\n\n  mod_id  date.dose infuse.time.real infuse.time infuse.dose          bolus.time bolus.dose given.dose maxint weight\n1      1 2011-10-02             <NA>        <NA>          NA 2011-10-02 15:35:00         25         NA      0     NA\n2      1 2011-10-02             <NA>        <NA>          NA 2011-10-02 17:26:00         25         NA      0     NA\n3      1 2017-02-04             <NA>        <NA>          NA 2017-02-04 16:15:00         50         NA      0     NA\n4      1 2017-02-04             <NA>        <NA>          NA 2017-02-04 16:30:00         20         NA      0     NA\n5      1 2017-02-04             <NA>        <NA>          NA 2017-02-04 20:57:00         20         NA      0     NA\n6      2 2014-06-28             <NA>        <NA>          NA 2014-06-28 08:15:00         20         NA      0     NA\n\nPro-Drug Level\nThis module processes drug concentration data that can be merged with medication dose data and other types of data.\nThis module is semi-interactive – it generates several files while processing in order to check missing data and potential data errors, and get feedback from an investigator. If corrected information (‘fix’ files) are provided, the module should be re-run to incorporate the corrections.\nrun_DrugLevel is the function to process the drug concentration data.\n\n\nconc.out <- run_DrugLevel(conc.path=file.path(dataDir,\"conc_mod_id.rds\"),\n    conc.select=c('mod_id','mod_id_visit','samp','fentanyl_calc_conc'),\n    conc.rename=c(fentanyl_calc_conc = 'conc.level', samp= 'event'),\n    conc.mod.list=list(mod_id_event = expression(paste(mod_id_visit, event, sep = '_'))),\n    samp.path=file.path(dataDir,\"samp_mod_id.rds\"),\n    samp.mod.list=list(mod_id_event = expression(paste(mod_id_visit, samp, sep = '_'))),\n    check.path=checkDir,\n    failmiss_fn = 'MissingConcDate-',\n    multsets_fn = 'multipleSetsConc-',\n    faildup_fn = 'DuplicateConc-', \n    drugname=drugname,\n    LLOQ=LLOQ,\n    demo.list=demo.out)\n\n\n#########################\n3 rows need review, see file /var/folders/06/0qv1dr5508j_tbzqdjfqjf680000gn/T//RtmpwgVAz4/checks/failMissingConcDate-fent.csv AND create /var/folders/06/0qv1dr5508j_tbzqdjfqjf680000gn/T//RtmpwgVAz4/checks/fixMissingConcDate-fent.csv\n#########################\nsubjects with concentration missing from sample file\n mod_id mod_id_event\n      8        8.1_1\n      8        8.1_2\n      8        8.1_3\n1 subjects have multiple sets of concentration data\n16 total unique subjects ids (including multiple visits) currently in the concentration data\n15 total unique subjects in the concentration data\n#########################\n15 rows need review, see file /var/folders/06/0qv1dr5508j_tbzqdjfqjf680000gn/T//RtmpwgVAz4/checks/multipleSetsConc-fent2021-10-03.csv\n#########################\n15 total unique subjects ids (after excluding multiple visits) in the concentration data\n15 total unique subjects in the concentration data\n\nhead(conc.out)\n\n\n   mod_id mod_id_visit event  conc.level mod_id_event           date.time eid\n1       1          1.2     1 0.014136220        1.2_1 2017-02-03 10:46:00   1\n2       1          1.2     2 0.279820752        1.2_2 2017-02-04 20:30:00   1\n55     10         10.1     2 3.136047304       10.1_2 2016-12-24 18:00:00   1\n56     10         10.1     9 0.004720171       10.1_9 2017-01-01 04:20:00   1\n57     10         10.1    10 0.017136367      10.1_10 2017-01-02 04:42:00   1\n58     10         10.1    12 0.006335571      10.1_12 2017-01-04 03:40:00   1\n\nThe output provides a message that 3 rows are missing concentration date. The file ‘failMissingConcDate-fent.csv’ contains the 3 records with missing values for the date.time variable.\n\n\n( fail.miss.conc.date <- read.csv(file.path(checkDir,\"failMissingConcDate-fent.csv\")) )\n\n\n  subject_id subject_uid mod_id_event date.time\n1       1566    35885929        8.1_1        NA\n2       1566    35885929        8.1_2        NA\n3       1566    35885929        8.1_3        NA\n\nWe can correct the missing dates by providing an updated file called ‘fixMissingConcDate-fent.csv’ that contains the missing data.\n\n\nfail.miss.conc.date[,\"date.time\"] <- c(\"9/30/2016 09:32\",\"10/1/2016 19:20\",\"10/2/2016 02:04\")\nfail.miss.conc.date\n\n\n  subject_id subject_uid mod_id_event       date.time\n1       1566    35885929        8.1_1 9/30/2016 09:32\n2       1566    35885929        8.1_2 10/1/2016 19:20\n3       1566    35885929        8.1_3 10/2/2016 02:04\n\nwrite.csv(fail.miss.conc.date, file.path(checkDir,\"fixMissingConcDate-fent.csv\"))\n\n\n\nAfter providing the updated file, the same run_DrugLevel() function should be re-run. The output now contains an additional message below the first message saying “fixMissingConcDate-fent.csv read with failures replaced”. The conc.out data.frame also contains 3 additional rows with the corrected data.\n\n\nconc.out <- run_DrugLevel(conc.path=file.path(dataDir,\"conc_mod_id.rds\"),\n    conc.select=c('mod_id','mod_id_visit','samp','fentanyl_calc_conc'),\n    conc.rename=c(fentanyl_calc_conc = 'conc.level', samp= 'event'),\n    conc.mod.list=list(mod_id_event = expression(paste(mod_id_visit, event, sep = '_'))),\n    samp.path=file.path(dataDir,\"samp_mod_id.rds\"),\n    samp.mod.list=list(mod_id_event = expression(paste(mod_id_visit, samp, sep = '_'))),\n    check.path=checkDir,\n    failmiss_fn = 'MissingConcDate-',\n    multsets_fn = 'multipleSetsConc-',\n    faildup_fn = 'DuplicateConc-', \n    drugname=drugname,\n    LLOQ=LLOQ,\n    demo.list=demo.out)\n\n\n#########################\n3 rows need review, see file /var/folders/06/0qv1dr5508j_tbzqdjfqjf680000gn/T//RtmpwgVAz4/checks/failMissingConcDate-fent.csv AND create /var/folders/06/0qv1dr5508j_tbzqdjfqjf680000gn/T//RtmpwgVAz4/checks/fixMissingConcDate-fent.csv\n#########################\nfile /var/folders/06/0qv1dr5508j_tbzqdjfqjf680000gn/T//RtmpwgVAz4/checks/fixMissingConcDate-fent.csv read with failures replaced\nsubjects with concentration missing from sample file\n[1] mod_id       mod_id_event\n<0 rows> (or 0-length row.names)\n1 subjects have multiple sets of concentration data\n16 total unique subjects ids (including multiple visits) currently in the concentration data\n15 total unique subjects in the concentration data\n#########################\n15 rows need review, see file /var/folders/06/0qv1dr5508j_tbzqdjfqjf680000gn/T//RtmpwgVAz4/checks/multipleSetsConc-fent2021-10-03.csv\n#########################\n15 total unique subjects ids (after excluding multiple visits) in the concentration data\n15 total unique subjects in the concentration data\n\nPro-Laboratory\nThis module processes laboratory data that can be merged with data from other modules.\nrun_Labs() is the function to process the laboratory data.\n\n\ncreat.out <- run_Labs(lab.path=file.path(dataDir,\"creat_mod_id.rds\"),\n    lab.select = c('mod_id','date.time','creat'),\n    lab.mod.list = list(date.time = expression(parse_dates(fixDates(paste(date, time))))))\n\nalb.out <- run_Labs(lab.path=file.path(dataDir,\"alb_mod_id.rds\"),\n    lab.select = c('mod_id','date.time','alb'),\n    lab.mod.list = list(date.time = expression(parse_dates(fixDates(paste(date, time))))))\n\nlab.out <- list(creat.out, alb.out)\n\nstr(lab.out)\n\n\nList of 2\n $ :'data.frame':   266 obs. of  3 variables:\n  ..$ mod_id   : int [1:266] 1 1 1 1 1 1 1 1 1 1 ...\n  ..$ date.time: POSIXct[1:266], format: \"2017-02-05 04:00:00\" \"2017-02-06 05:00:00\" \"2011-10-03 04:28:00\" \"2011-10-04 04:15:00\" ...\n  ..$ creat    : num [1:266] 0.52 0.53 0.42 0.35 0.29 0.28 0.34 0.59 0.54 0.26 ...\n $ :'data.frame':   44 obs. of  3 variables:\n  ..$ mod_id   : int [1:44] 8 8 8 8 4 6 6 9 10 10 ...\n  ..$ date.time: POSIXct[1:44], format: \"2020-07-30 05:23:00\" \"2020-07-28 03:12:00\" \"2020-07-29 01:39:00\" \"2020-08-21 10:35:00\" ...\n  ..$ alb      : num [1:44] 2.9 2 2.7 4.1 4.1 2.3 2.6 3 3.1 4.2 ...\n\nBuild-PK-IV\nThis module creates PK data for IV medications.\nBoth dose data in the format output from the Pro-Med-Str1 module and concentration data in the format output from the Pro-DrugLevel module are required.\nDemographic data from the Pro-Demographic module and laboratory data from the Pro-Laboratory module are optional.\nThe module is semi-interactive – it generates several files to check potential data errors, and get feedback from an investigator. If corrected information (‘fix’ files) are provided, the module should be re-run to incorporate the corrections.\nIf pk.vars includes ‘date’, the output generates its original date-time to which the ‘time’ is mapped. Users can use pk.vars to include variables for demographics or labs that are already merged with the concentration dataset when they prefer to provide a single concentration data file (required). But a separate dose data file is still required.\nrun_Build_PK_IV() is the function to build PK data with IV dosing data.\n\n\npk_dat <- run_Build_PK_IV(\n    conc=conc.out,\n    conc.columns = list(id = 'mod_id', datetime = 'date.time', druglevel = 'conc.level', \n                        idvisit = 'mod_id_visit'),\n    dose=ivdose.out,\n    dose.columns = list(id = 'mod_id', date = 'date.dose', infuseDatetime = 'infuse.time', \n                        infuseDose = 'infuse.dose', infuseTimeExact= 'infuse.time.real',\n                        bolusDatetime = 'bolus.time', bolusDose = 'bolus.dose', \n                        gap = 'maxint', weight = 'weight'),\n    demo.list = demo.out,\n    demo.columns = list(id = 'mod_id', datetime = 'date.time', idvisit = 'mod_id_visit'),\n    lab.list = lab.out,\n    lab.columns = list(id = 'mod_id', datetime = 'date.time'),\n    pk.vars=c('date'),\n    drugname=drugname,\n    check.path=checkDir,\n    missdemo_fn='-missing-demo',\n    faildupbol_fn='DuplicateBolus-',\n    date.format=\"%m/%d/%y %H:%M:%S\",\n    date.tz=\"America/Chicago\")\n\n\n0 duplicated rows\nThe dimension of the PK data before merging with demographics: 328 x 9\nThe number of subjects in the PK data before merging with demographics: 15\nThe number of subjects in the demographic file, who meet the exclusion criteria: 2\ncheck NA frequency in demographics, see file /var/folders/06/0qv1dr5508j_tbzqdjfqjf680000gn/T//RtmpwgVAz4/checks/fent-missing-demo.csv\nSome demographic variables are missing and will be excluded: \nThe list of final demographic variables: mod_visit\ngender\nweight\nheight\nsurgery_date\nageatsurgery\nstat_sts\ncpb_sts\nin_hospital_mortality\nadd_ecmo\ndate_icu_dc\ntime_fromor\nlength_of_icu_stay\nweight_demo\nChecked: there are no missing creat\nList of IDs missing at least 1 alb: 1.2\n11.1\n15.1\n2.1\n3.1\n4.1\n5.1\n7.1\n8.1\nSome PK variables are missing and will be excluded: \nThe dimension of the final PK data exported with the key demographics: 291 x 24 with 13 distinct subjects (mod_id)\n\nRetrieving the original IDs:\nThe function pullRealId() appends the original IDs – subject_id and subject_uid to the data.\nThe parameter remove.mod.id=TRUE can be used to also remove any module IDs – mod_id, mod_visit, and mod_id_visit.\n\n\n\n# convert id back to original IDs\npk_dat <- pullRealId(pk_dat, remove.mod.id=TRUE)\n\nhead(pk_dat)\n\n\n     subject_id subject_uid time   amt        dv rate mdv evid              date gender weight height surgery_date ageatsurgery stat_sts\n2         466.1    28579217 0.00  50.0        NA  0.0   1    1 02/04/17 16:15:00      0  21.99 116.90     2/4/2017         2451        1\n2.1       466.1    28579217 0.25  20.0        NA  0.0   1    1 02/04/17 16:30:00      0  21.99 116.90     2/4/2017         2451        1\n2.2       466.1    28579217 4.25    NA 0.2798208   NA   0    0 02/04/17 20:30:00      0  21.99 116.90     2/4/2017         2451        1\n12       1607.0    38551767 0.00  10.0        NA  0.0   1    1 12/24/16 07:15:00      0   2.60  45.94   12/24/2016           23        3\n12.1     1607.0    38551767 0.00 127.4        NA 10.4   1    1 12/24/16 07:15:00      0   2.60  45.94   12/24/2016           23        3\n12.2     1607.0    38551767 1.25  15.0        NA  0.0   1    1 12/24/16 08:30:00      0   2.60  45.94   12/24/2016           23        3\n     cpb_sts in_hospital_mortality add_ecmo date_icu_dc time_fromor length_of_icu_stay weight_demo creat alb\n2        107                     0        0    2/5/2017        1322                  1       21.99  0.54  NA\n2.1      107                     0        0    2/5/2017        1322                  1       21.99  0.54  NA\n2.2      107                     0        0    2/5/2017        1322                  1       21.99  0.54  NA\n12       110                     0        0    1/5/2017          NA                 12        2.76  0.66 1.6\n12.1     110                     0        0    1/5/2017          NA                 12        2.76  0.66 1.6\n12.2     110                     0        0    1/5/2017          NA                 12        2.76  0.66 1.6\n\nReferences\nChoi L, Beck C, McNeer E, Weeks HL, Williams ML, James NT, Niu X, Abou-Khalil BW, Birdwell KA, Roden DM, Stein CM. Development of a System for Post-marketing Population Pharmacokinetic and Pharmacodynamic Studies using Real-World Data from Electronic Health Records. Clinical Pharmacology & Therapeutics. 2020 Apr;107(4):934-43. doi: 10.1002/cpt.1787.\n\n\n\n",
      "last_modified": "2021-10-03T17:01:07-05:00"
    },
    {
      "path": "Build-PK-IV-simple.html",
      "title": "Build-PK-IV - Simple",
      "description": "This tutorial describes a simple pharmacokinetic data building procedure without using additional data processing modules for medications that are intravenously administered.\n",
      "author": [],
      "contents": "\n\nContents\nIntroduction\nQuick Data Building with Processed Datasets(1) First define directories\n(2) Prepare cleaned and appropriately formatted data files and load the data files\n(3) Rename ID variables with standardized names\n(4) Build a final PK dataset with the function run_Build_PK_IV() using the prepared datasets above\n\nReferences\n\nUnder construction\nSee also “Example 1: Quick Data Building with Processed Datasets” in “2. EHR Vignette for Structured Data” of EHR package.\nIntroduction\nThis tutorial describes a simple pharmacokinetic (PK) data building procedure in EHRtoPKPD for medications that are intravenously (IV) administered. It demonstrates how to quickly build PK data using Build-PK-IV when cleaned data for concentration, drug dose, demographic and laboratory datasets are available in the appropriate data format. A comprehensive PK data building procedure with Build-PK-IV for IV medications that requires several data processing modules is described in Build-PK-IV - Comprehensive (see Choi et al.\\(^{1}\\) for details).\nTo begin we load the EHR package, the pkdata package, and the lubridate package.\n\n\n# load EHR package and dependencies\nlibrary(EHR)\nlibrary(pkdata)\nlibrary(lubridate)\n\n\n\nQuick Data Building with Processed Datasets\nThere are four basic steps to build a PK dataset quickly.\n(1) First define directories\na directory for the raw data (rawDataDir in the example below)\na directory for interactive checking output files (checkDir in the example below)\n\n\n# define directories\nrawDataDir <- system.file(\"examples\", \"str_ex1\", package=\"EHR\")\ntd <- tempdir()\ncheckDir <- file.path(td, 'check1')\ndir.create(checkDir)\n\n\n\n(2) Prepare cleaned and appropriately formatted data files and load the data files\nFour types of files are used in the Build-PK-IV module:\nan IV dosing file\na drug concentration file\na demographic file\na laboratory file (optional)\n\n\n# read in data\nivdose.data <- read.csv(file.path(rawDataDir,\"IVDose_DATA_simple.csv\"),stringsAsFactors = FALSE)\nhead(ivdose.data, 3)\n\n\n  patient_id  date.dose    infuse.time.real         infuse.time infuse.dose bolus.time bolus.dose given.dose maxint weight\n1          1 2009-10-18 2009-10-18 11:35:00 2009-10-18 12:00:00         8.8       <NA>         NA          0     60    4.4\n2          1 2009-10-18 2009-10-18 12:00:00 2009-10-18 12:00:00         8.8       <NA>         NA          0     60    4.4\n3          1 2009-10-18 2009-10-18 13:00:00 2009-10-18 13:00:00         8.8       <NA>         NA          0     60    4.4\n\nconc.data <- read.csv(file.path(rawDataDir,\"Concentration_DATA_simple.csv\"),stringsAsFactors = FALSE)\nhead(conc.data, 3)\n\n\n  patient_id patient_visit_id event conc.level           date.time\n1         10             10.1     4       0.17 2019-02-02 05:30:00\n2         10             10.1     2       4.05 2019-02-24 14:00:00\n3         10             10.1     3       0.64 2019-02-25 03:30:00\n\ndemo <- read.csv(file.path(rawDataDir,\"Demographics_DATA_simple.csv\"),stringsAsFactors = FALSE)\nhead(demo, 3)\n\n\n  patient_id patient_visit_id gender weight height surgery_date ageatsurgery stat_sts cpb_sts date_icu_dc time_fromor\n1          2              2.1      1  62.99 179.72    6/20/2015         6245        2      80   6/22/2015          NA\n2          3              3.1      0   7.71  72.99   12/15/2018          574        3      67  12/16/2018          NA\n3          4              4.1      1  12.00  92.02    1/12/2018         1214        1      70   1/13/2018          NA\n  length_of_icu_stay surgery_date_time\n1                  2              <NA>\n2                  1              <NA>\n3                  1              <NA>\n\ncreat.data <- read.csv(file.path(rawDataDir,\"Creatinine_DATA_simple.csv\"),stringsAsFactors = FALSE)\nhead(creat.data, 3)\n\n\n  patient_id           date.time creat\n1          2 2015-06-23 04:35:00  0.75\n2          2 2015-06-22 04:00:00  0.69\n3          2 2015-06-21 01:55:00  0.78\n\nAll four of the above datasets have been cleaned and put in the appropriate data format. The patient_id variable is present in all four of the above datasets. This is a unique patient-level ID. The concentration and demographic files also contain a patient_visit_id variable, which is a unique visit-level ID. In order to run the Build-PK-IV module, these variables must be renamed, as we demonstrate in the next section.\n(3) Rename ID variables with standardized names\nThe EHR package modules use a standardized naming convention for patient identification (ID) variables. We rename the unique patient-level ID from patient_id to mod_id and the visit-level ID from patient_visit_id to mod_id_visit. If there is only a single visit/course per subject, the unique patient-level ID and visit-level ID can be the same, however both mod_id and mod_id_visit should be defined.\n\n\n# rename ID variables\nnames(conc.data)[1:2] <- names(demo)[1:2] <- c(\"mod_id\", \"mod_id_visit\")\nnames(creat.data)[1] <- names(ivdose.data)[1] <- \"mod_id\"\n\n\n\n(4) Build a final PK dataset with the function run_Build_PK_IV() using the prepared datasets above\nThe following arguments are used in the run_Build_PK_IV function:\nconc: drug concentration data\nconc.columns: a named list that should specify columns in concentration data\ndose: IV dose data\ndose.columns: a named list that should specify columns in dose data\ndemo.list: demographic data\ndemo.columns: a named list that should specify columns in demographic data\nlab.list: laboratory data\nlab.columns: a named list that should specify columns in lab data\ncheck.path: (optional) file path where the generated files for data checking are stored, and the corresponding data files with fixed data exist\nIn this tutorial, we describe arguments only relevant to this example. A detailed description of all arguments can be found in the EHR package manual of run_Build_PK_IV().\nBelow we show how to run run_Build_PK_IV using the example data from above.\n\n\n# running run_Build_PK_IV()\nsimple_pk_dat <- run_Build_PK_IV(\n    conc=conc.data,\n    conc.columns = list(id = 'mod_id', datetime = 'date.time', druglevel = 'conc.level', \n                        idvisit = 'mod_id_visit'),\n    dose=ivdose.data,\n    dose.columns = list(id = 'mod_id', date = 'date.dose', infuseDatetime = 'infuse.time', \n                        infuseDose = 'infuse.dose', infuseTimeExact= 'infuse.time.real', \n                        bolusDatetime = 'bolus.time', bolusDose = 'bolus.dose', \n                        gap = 'maxint', weight = 'weight'),\n    demo.list = demo,\n    demo.columns = list(id = 'mod_id', datetime = 'surgery_date_time', idvisit = 'mod_id_visit'),\n    lab.list = list(creat.data),\n    lab.columns = list(id = 'mod_id', datetime = 'date.time'),\n    check.path=checkDir)\n\n\n0 duplicated rows\nThe dimension of the PK data before merging with demographics: 149 x 9\nThe number of subjects in the PK data before merging with demographics: 10\nThe number of subjects in the demographic file, who meet the exclusion criteria: 0\ncheck NA frequency in demographics, see file /var/folders/06/0qv1dr5508j_tbzqdjfqjf680000gn/T//RtmpkNq6hO/check1/-missing-demo.csv\nSome demographic variables are missing and will be excluded: \nThe list of final demographic variables: gender\nweight\nheight\nsurgery_date\nageatsurgery\nstat_sts\ncpb_sts\ndate_icu_dc\ntime_fromor\nlength_of_icu_stay\nweight_demo\nChecked: there are no missing creat\nSome PK variables are missing and will be excluded: \nThe dimension of the final PK data exported with the key demographics: 149 x 19 with 10 distinct subjects (mod_id)\n\nNotice that the data building function generates an automatic message that tells some information about the data processing as well as the final dataset including the variables, the sample size, and missingness.\nBelow we show the final PK dataset.\n\n\n# the final PK dataset\nhead(simple_pk_dat,15)\n\n\n   mod_id_visit  time amt   dv rate mdv evid gender weight height surgery_date ageatsurgery stat_sts cpb_sts date_icu_dc\n1           1.2  0.00  50   NA    0   1    1      1  25.04 114.39     1/8/2016         2295        2      79    1/9/2016\n2           1.2  0.75 100   NA    0   1    1      1  25.04 114.39     1/8/2016         2295        2      79    1/9/2016\n3           1.2  1.65 100   NA    0   1    1      1  25.04 114.39     1/8/2016         2295        2      79    1/9/2016\n4           1.2  1.77 250   NA    0   1    1      1  25.04 114.39     1/8/2016         2295        2      79    1/9/2016\n5           1.2  2.05 250   NA    0   1    1      1  25.04 114.39     1/8/2016         2295        2      79    1/9/2016\n6           1.2  3.72 250   NA    0   1    1      1  25.04 114.39     1/8/2016         2295        2      79    1/9/2016\n7           1.2  5.23 100   NA    0   1    1      1  25.04 114.39     1/8/2016         2295        2      79    1/9/2016\n8           1.2  6.25  NA 2.83   NA   0    0      1  25.04 114.39     1/8/2016         2295        2      79    1/9/2016\n9           1.2 20.68  NA 0.41   NA   0    0      1  25.04 114.39     1/8/2016         2295        2      79    1/9/2016\n10          1.2 70.90  NA 0.04   NA   0    0      1  25.04 114.39     1/8/2016         2295        2      79    1/9/2016\n11          1.2 95.25  NA 0.01   NA   0    0      1  25.04 114.39     1/8/2016         2295        2      79    1/9/2016\n12         10.1  0.00  25   NA    0   1    1      0   6.06  63.20    2/24/2019          209        1     195    3/1/2019\n13         10.1  0.52 100   NA    0   1    1      0   6.06  63.20    2/24/2019          209        1     195    3/1/2019\n14         10.1  1.42  25   NA    0   1    1      0   6.06  63.20    2/24/2019          209        1     195    3/1/2019\n15         10.1  2.77  50   NA    0   1    1      0   6.06  63.20    2/24/2019          209        1     195    3/1/2019\n   time_fromor length_of_icu_stay weight_demo creat\n1         2020                  1       25.04  0.60\n2         2020                  1       25.04  0.60\n3         2020                  1       25.04  0.60\n4         2020                  1       25.04  0.60\n5         2020                  1       25.04  0.60\n6         2020                  1       25.04  0.60\n7         2020                  1       25.04  0.60\n8         2020                  1       25.04  0.60\n9         2020                  1       25.04  0.50\n10        2020                  1       25.04  0.54\n11        2020                  1       25.04  0.57\n12        2016                  5        6.06  0.64\n13        2016                  5        6.06  0.64\n14        2016                  5        6.06  0.64\n15        2016                  5        6.06  0.64\n\nThis dataset includes the mod_id_visit variable and standard NONMEM formatted variables (for details of data items, see PK-Data-IV-Dosing).\ntime - time of dosing or concentration event\namt - dose amount administered (NA for concentration records)\ndv - dependent variable; i.e., observed concentration (NA for dosing records)\nrate - rate of drug administration (e.g., rate=0 for bolus doses)\nmdv - missing dependent variable (dv) indicator (e.g., 0 = not missing dv, 1 = missing dv)\nevid - event ID (e.g., 0 = observation, 1 = dose event)\nIf demographic data is provided, the demographic variables will also be included.\nIf pk.vars includes ‘date’, the output generates its original date-time to which the ‘time’ is mapped. Users can use pk.vars to include variables for demographics or labs that are already merged with the concentration dataset when they prefer to provide a single concentration data file (required). But still a separate dose data file is required.\nReferences\nChoi L, Beck C, McNeer E, Weeks HL, Williams ML, James NT, Niu X, Abou-Khalil BW, Birdwell KA, Roden DM, Stein CM. Development of a System for Post-marketing Population Pharmacokinetic and Pharmacodynamic Studies using Real-World Data from Electronic Health Records. Clinical Pharmacology & Therapeutics. 2020 Apr;107(4):934-43. doi: 10.1002/cpt.1787.\n\n\n\n",
      "last_modified": "2021-10-03T16:52:57-05:00"
    },
    {
      "path": "Build-PK-Oral.html",
      "title": "Build-PK-Oral",
      "description": "This tutorial describes the PK data building module in the system for medications that are typically orally administrated. It demonstrates how to quickly build PK data using *Build-PK-Oral* when drug dose data that can be provided by users or generated from unstructured clinical notes using extracted dosing information with the *Extract-Med* module and processed with the *Pro-Med-NLP* module in the system.\n",
      "author": [
        {
          "name": "Michael L. Williams",
          "url": {}
        }
      ],
      "contents": "\n\nContents\nIntroduction\nEHR Sourced Oral Dosing DataWithout Last-Dose Times\nWith Last-Dose times\n\nBuild-PK-Oral(1) Build the PK data without last-dose time\n(2) Build the PK data with last-dose time\n\nReferences\n\nSee also “4. EHR Vignette for Build-PK-Oral” in EHR package.\nIntroduction\nWe describe oral dosing data commonly obtained from electronic health records (EHRs) in the presence and absence of last dose time information. Finally, we explain how to run the Build-PK-Oral module.\nEHR Sourced Oral Dosing Data\nDrug dose information can be obtained from structured e-prescription databases, or extracted from clinical notes using the module Extract-Med (see Extract-Med to understand that process). The obtained dose information can be processing using Part II of Pro-Med-Str for the one from e-prescription databases and Pro-Med-NLP for the one extracted from clinical notes. Other data can be also processed using relevant modules (e.g., Pro-Drug Level, Pro-Laboratory). Our interest is in the intermediate dataset generated by these modules but not yet in a suitable format for PK analysis (see PK-Data-Oral-Dosing for an appropriate PK data form). Here is an example of such data.\n\n\nlibrary(EHR)\n# Data generating function for examples\nmkdat <- function() {\n  npat=3\n  visits <- floor(runif(npat, min=2, max=6))\n  id <- rep(1:npat, visits)\n  dt <- as.POSIXct(paste(as.Date(sort(sample(700, sum(visits))), \n                                 origin = '2019-01-01'), '10:00:00'), tz = 'UTC') \n  + rnorm(sum(visits), 0, 1*60*60)\n  dose_morn <- sample(c(2.5,5,7.5,10), sum(visits), replace = TRUE)\n  conc <- round(rnorm(sum(visits), 1.5*dose_morn, 1),1)\n  ld <- dt - sample(10:16, sum(visits), replace = TRUE) * 3600\n  ld[rnorm(sum(visits)) < .3] <- NA\n  age <- rep(sample(40:75, npat), visits)\n  weight <- rep(round(rnorm(npat, 180, 20)),visits)\n  hgb <- round(rep(rnorm(npat, 10, 2), visits),1)\n  data.frame(id, dt, dose_morn, conc, age, weight, hgb, ld)\n}\n\n# Make example data\nset.seed(20)\ndat <- mkdat()\nex <- dat\ndat2 <- dat[,-8]\nex\n\n\n   id                  dt dose_morn conc age weight  hgb                  ld\n1   1 2019-02-27 10:00:00      10.0 16.1  46    154 12.0 2019-02-26 22:00:00\n2   1 2019-05-08 10:00:00       5.0  6.4  46    154 12.0 2019-05-07 18:00:00\n3   1 2019-06-30 10:00:00       5.0  5.6  46    154 12.0                <NA>\n4   1 2019-11-20 10:00:00       5.0  6.6  46    154 12.0 2019-11-19 18:00:00\n5   1 2020-04-01 10:00:00       2.5  5.0  46    154 12.0                <NA>\n6   2 2020-04-10 10:00:00      10.0 15.1  72    193  8.6                <NA>\n7   2 2020-05-13 10:00:00       7.5 11.7  72    193  8.6 2020-05-12 21:00:00\n8   2 2020-05-26 10:00:00       2.5  2.9  72    193  8.6                <NA>\n9   2 2020-06-10 10:00:00       2.5  2.2  72    193  8.6                <NA>\n10  2 2020-06-25 10:00:00       2.5  4.3  72    193  8.6                <NA>\n11  3 2020-07-07 10:00:00       2.5  3.4  56    167 12.2                <NA>\n12  3 2020-09-25 10:00:00       7.5 10.2  56    167 12.2 2020-09-24 22:00:00\n13  3 2020-10-04 10:00:00       5.0  7.5  56    167 12.2                <NA>\n\nThe ID, time, and covariate data in this dataframe is self explanatory. The difficult data to deal with can be found in dose_morn, conc, and ld. conc is a measured blood concentration which is recorded at the time indicated in time. dose_morn is the dose which was taken in the morning of that measured concentration, as extracted by Extract-Med. ld is the last-dose time, the extracted time of the dose which precedes the measured concentration, if present in the EHR. This information can be used to construct a course of drug dosing but some assumptions need to be made. Consider the two following assumptions:\nDosing only occurs on the morning of the recorded dose.\nDosing occurs twice daily at 8am and 8pm.\nObviously, the correct assumption will depend on the drug of interest – some drugs are taken on a regular schedule, while others are as needed. Drugs undergoing routine therapeutic drug monitoring tend to be the latter so assumption 2 will likely be the better assumption.\nIf a twice-daily dosing assumption is appropriate, then we can begin to think about how to best choose the timing of each dose. Can we exploit some information in our dataset to determine dose timings which are more realistic than, say every day 8am and 8pm. In doing so we need to remember that the timing of the dose before the measured concentration is most important for estimating the PK profile. Some other things to consider:\nThe timing of the concentration measurement itself may impact dosing.\nThere may or may not be an extracted last-dose time to work with.\nFor this reason, we will break up our algorithm into with and without last-dose times and discuss how we arrive at a final dose-building algorithm.\nWithout Last-Dose Times\nWhen we do not have an extracted last-dose time, we must work off of only our measured concentration timing and assumptions about how routine therapeutic drug monitoring is typically performed. The majority of these labs are conducted in the morning, and patients will typically hold off on taking their medications until after the blood draw. For that reason, we assume that a dose is taken 30 minutes after a measured blood concentration, then proceeds with a dose every 12 hours. The final dose in the sequence will occur 6-18 hours before the next measured concentration, the timing of which will determine the next sequence of doses, and so on until the final measured concentration. The first measured concentration requires special attention. Typical therapeutic drug monitoring procedure suggests it is reasonable to assume that the drug has been taken regularly before this first concentration. The safest assumptiom, assuming no further information is available, is that the drug has been taken every 12 hours for long enough to reach a steady state of trough concentrations. In our PK dose building algorithm, we use a default of 336 hours (i.e., 14 days), ending 12 hours before the first measured concentration.\nWith Last-Dose times\nIn the case where extracted last-dose times are available, we can begin by building the same dataset as without last-dose times. We then add a row for a dose corresponding to the extracted last dose time and eliminate an appropriate number of doses from the preceding dose sequence to avoid incorrect double-dosing; this is done by removing doses until the last dose in the sequence is 6-18 hours before the extracted last-dose time. This allows for last-dose times which are more than 12 hours before the extracted concentration to be appropriately accounted for.\nBuild-PK-Oral\nWe now describe how to build the PK data without last-dose time and with last-dose time, both of which can be built using run_Build_PK_Oral() by defining the argument ldCol differently.\nTo begin we load the EHR package, the pkdata package, and the lubridate package.\n\n\n# load EHR package and dependencies\nlibrary(EHR)\nlibrary(pkdata)\nlibrary(lubridate)\n\n\n\nLet’s have another look at the example data we want to process:\n\n\nex\n\n\n   id                  dt dose_morn conc age weight  hgb                  ld\n1   1 2019-02-27 10:00:00      10.0 16.1  46    154 12.0 2019-02-26 22:00:00\n2   1 2019-05-08 10:00:00       5.0  6.4  46    154 12.0 2019-05-07 18:00:00\n3   1 2019-06-30 10:00:00       5.0  5.6  46    154 12.0                <NA>\n4   1 2019-11-20 10:00:00       5.0  6.6  46    154 12.0 2019-11-19 18:00:00\n5   1 2020-04-01 10:00:00       2.5  5.0  46    154 12.0                <NA>\n6   2 2020-04-10 10:00:00      10.0 15.1  72    193  8.6                <NA>\n7   2 2020-05-13 10:00:00       7.5 11.7  72    193  8.6 2020-05-12 21:00:00\n8   2 2020-05-26 10:00:00       2.5  2.9  72    193  8.6                <NA>\n9   2 2020-06-10 10:00:00       2.5  2.2  72    193  8.6                <NA>\n10  2 2020-06-25 10:00:00       2.5  4.3  72    193  8.6                <NA>\n11  3 2020-07-07 10:00:00       2.5  3.4  56    167 12.2                <NA>\n12  3 2020-09-25 10:00:00       7.5 10.2  56    167 12.2 2020-09-24 22:00:00\n13  3 2020-10-04 10:00:00       5.0  7.5  56    167 12.2                <NA>\n\nThere are 3 individuals in the dataset. Each has a set of EHR-extracted dose and blood concentrations data along with demographic data and information commonly found with laboratory data:\nAll concentrations are being taken in the morning. Given that this is a drug which should be taken orally every 12 hours, we can construct a reasonable dosing schedule which details the amount and timing of each dose.\nrun_Build_PK_Oral() will build an appropriate dataset for population PK analysis for drugs orally administered, given specification of appropriate columns:\nidCol: subject identification number\ndtCol: time of concentration measurement\ndoseCol: dose\nconcCol: drug concentration\nldCol: last-dose time; the default is NULL to ignore\nfirst_interval_hours: hours of regular dosing leading up to the first drug concentration; the default is 336 hours = 14 days\nimputeClosest: Vector of columns for imputation of missing data using last observation carried forward or, if unavailable, next observation propagated backward\n(1) Build the PK data without last-dose time\nSuppose we do not have the last-dose time information. For illustrative purpose, we remove this information (i.e., column 8 is omitted in this example data).\n\n\n# Build PK data without last-dose times\nrun_Build_PK_Oral(x = dat[,-8],\n                  idCol = \"id\",\n                  dtCol = \"dt\",\n                  doseCol = \"dose_morn\",\n                  concCol = \"conc\",\n                  ldCol = NULL,\n                  first_interval_hours = 336,\n                  imputeClosest = NULL)\n\n\n   id   time  amt   dv mdv evid addl II                date age weight  hgb\n1   1    0.0 10.0   NA   1    1   27 12 2019-02-13 10:00:00  46    154 12.0\n2   1  336.0   NA 16.1   0    0   NA NA 2019-02-27 10:00:00  46    154 12.0\n3   1  336.5 10.0   NA   1    1  139 12 2019-02-27 10:30:00  46    154 12.0\n4   1 2015.0   NA  6.4   0    0   NA NA 2019-05-08 10:00:00  46    154 12.0\n5   1 2015.5  5.0   NA   1    1  105 12 2019-05-08 10:30:00  46    154 12.0\n6   1 3287.0   NA  5.6   0    0   NA NA 2019-06-30 10:00:00  46    154 12.0\n7   1 3287.5  5.0   NA   1    1  285 12 2019-06-30 10:30:00  46    154 12.0\n8   1 6720.0   NA  6.6   0    0   NA NA 2019-11-20 10:00:00  46    154 12.0\n9   1 6720.5  5.0   NA   1    1  265 12 2019-11-20 10:30:00  46    154 12.0\n10  1 9911.0   NA  5.0   0    0   NA NA 2020-04-01 10:00:00  46    154 12.0\n11  2    0.0 10.0   NA   1    1   27 12 2020-03-27 10:00:00  72    193  8.6\n12  2  336.0   NA 15.1   0    0   NA NA 2020-04-10 10:00:00  72    193  8.6\n13  2  336.5 10.0   NA   1    1   65 12 2020-04-10 10:30:00  72    193  8.6\n14  2 1128.0   NA 11.7   0    0   NA NA 2020-05-13 10:00:00  72    193  8.6\n15  2 1128.5  7.5   NA   1    1   25 12 2020-05-13 10:30:00  72    193  8.6\n16  2 1440.0   NA  2.9   0    0   NA NA 2020-05-26 10:00:00  72    193  8.6\n17  2 1440.5  2.5   NA   1    1   29 12 2020-05-26 10:30:00  72    193  8.6\n18  2 1800.0   NA  2.2   0    0   NA NA 2020-06-10 10:00:00  72    193  8.6\n19  2 1800.5  2.5   NA   1    1   29 12 2020-06-10 10:30:00  72    193  8.6\n20  2 2160.0   NA  4.3   0    0   NA NA 2020-06-25 10:00:00  72    193  8.6\n21  3    0.0  2.5   NA   1    1   27 12 2020-06-23 10:00:00  56    167 12.2\n22  3  336.0   NA  3.4   0    0   NA NA 2020-07-07 10:00:00  56    167 12.2\n23  3  336.5  2.5   NA   1    1  159 12 2020-07-07 10:30:00  56    167 12.2\n24  3 2256.0   NA 10.2   0    0   NA NA 2020-09-25 10:00:00  56    167 12.2\n25  3 2256.5  7.5   NA   1    1   17 12 2020-09-25 10:30:00  56    167 12.2\n26  3 2472.0   NA  7.5   0    0   NA NA 2020-10-04 10:00:00  56    167 12.2\n\nNote that addl and II dictate an every-twelve-hour dosing schedule which leads up to the proceeding concentration. Covariates are preserved and a time variable which represents hours since first dose is generated. This data is now in an appropriate format for PK analysis but makes no use of the last-dose times.\n(2) Build the PK data with last-dose time\nSuppose we do now have the last-dose time information although they are extracted along with some (but not all) concentrations. When last-dose times are avaiable, they can be specified in the argument ldCol in the input data (e.g., ldCol = \"ld\". Then, the sequence of doses leading up to the extracted dose is reduced and a new row is inserted which accurately describes the timing of the dose which precedes the relevant concentration.\n\n\n# Build PK data with last-dose times\nrun_Build_PK_Oral(x = dat,\n                  idCol = \"id\",\n                  dtCol = \"dt\",\n                  doseCol = \"dose_morn\",\n                  concCol = \"conc\",\n                  ldCol = \"ld\",\n                  first_interval_hours = 336,\n                  imputeClosest = NULL)\n\n\n   id   time  amt   dv mdv evid addl II                date age weight  hgb\n1   1    0.0 10.0   NA   1    1   26 12 2019-02-13 10:00:00  46    154 12.0\n2   1  324.0 10.0   NA   1    1    0 NA 2019-02-26 22:00:00  46    154 12.0\n3   1  336.0   NA 16.1   0    0   NA NA 2019-02-27 10:00:00  46    154 12.0\n4   1  336.5 10.0   NA   1    1  138 12 2019-02-27 10:30:00  46    154 12.0\n5   1 1999.0 10.0   NA   1    1    0 NA 2019-05-07 18:00:00  46    154 12.0\n6   1 2015.0   NA  6.4   0    0   NA NA 2019-05-08 10:00:00  46    154 12.0\n7   1 2015.5  5.0   NA   1    1  105 12 2019-05-08 10:30:00  46    154 12.0\n8   1 3287.0   NA  5.6   0    0   NA NA 2019-06-30 10:00:00  46    154 12.0\n9   1 3287.5  5.0   NA   1    1  284 12 2019-06-30 10:30:00  46    154 12.0\n10  1 6704.0  5.0   NA   1    1    0 NA 2019-11-19 18:00:00  46    154 12.0\n11  1 6720.0   NA  6.6   0    0   NA NA 2019-11-20 10:00:00  46    154 12.0\n12  1 6720.5  5.0   NA   1    1  265 12 2019-11-20 10:30:00  46    154 12.0\n13  1 9911.0   NA  5.0   0    0   NA NA 2020-04-01 10:00:00  46    154 12.0\n14  2    0.0 10.0   NA   1    1   27 12 2020-03-27 10:00:00  72    193  8.6\n15  2  336.0   NA 15.1   0    0   NA NA 2020-04-10 10:00:00  72    193  8.6\n16  2  336.5 10.0   NA   1    1   64 12 2020-04-10 10:30:00  72    193  8.6\n17  2 1115.0 10.0   NA   1    1    0 NA 2020-05-12 21:00:00  72    193  8.6\n18  2 1128.0   NA 11.7   0    0   NA NA 2020-05-13 10:00:00  72    193  8.6\n19  2 1128.5  7.5   NA   1    1   25 12 2020-05-13 10:30:00  72    193  8.6\n20  2 1440.0   NA  2.9   0    0   NA NA 2020-05-26 10:00:00  72    193  8.6\n21  2 1440.5  2.5   NA   1    1   29 12 2020-05-26 10:30:00  72    193  8.6\n22  2 1800.0   NA  2.2   0    0   NA NA 2020-06-10 10:00:00  72    193  8.6\n23  2 1800.5  2.5   NA   1    1   29 12 2020-06-10 10:30:00  72    193  8.6\n24  2 2160.0   NA  4.3   0    0   NA NA 2020-06-25 10:00:00  72    193  8.6\n25  3    0.0  2.5   NA   1    1   27 12 2020-06-23 10:00:00  56    167 12.2\n26  3  336.0   NA  3.4   0    0   NA NA 2020-07-07 10:00:00  56    167 12.2\n27  3  336.5  2.5   NA   1    1  158 12 2020-07-07 10:30:00  56    167 12.2\n28  3 2244.0  2.5   NA   1    1    0 NA 2020-09-24 22:00:00  56    167 12.2\n29  3 2256.0   NA 10.2   0    0   NA NA 2020-09-25 10:00:00  56    167 12.2\n30  3 2256.5  7.5   NA   1    1   17 12 2020-09-25 10:30:00  56    167 12.2\n31  3 2472.0   NA  7.5   0    0   NA NA 2020-10-04 10:00:00  56    167 12.2\n\nIndividual 1 has no extracted last-dose times so their data is unchanged from before. Compare, however, rows 7-9 to rows 7-8 of the previous dataset constructed without last-dose times. The measured concentration of 14.1 on date 2019-11-01 is associated with a last-dose time. addl drops from 69 to 68 and the extracted last-dose is added in row 8 with additional date 2019-10-31 20:58:36 which is the last-dose time extracted from clinical notes. Notice that the number of doses leading up to the concentration is unchanged and the timing of the final dose has been adjusted to reflect information in the EHR (i.e., the calculated time of 1162.70 for time). This dataset still relies on assumptions about dosing, but should reflect the actual dosing schedule better by incorporating last-dose times from the EHR.\nNote that this dataset includes standard NONMEM formatted variables. For details of data items, see PK-Data-Oral-Dosing.\nReferences\nChoi L, Beck C, McNeer E, Weeks HL, Williams ML, James NT, Niu X, Abou-Khalil BW, Birdwell KA, Roden DM, Stein CM. Development of a System for Post-marketing Population Pharmacokinetic and Pharmacodynamic Studies using Real-World Data from Electronic Health Records. Clinical Pharmacology & Therapeutics. 2020 Apr;107(4):934-43. doi: 10.1002/cpt.1787.\n\n\n\n",
      "last_modified": "2021-10-03T15:51:05-05:00"
    },
    {
      "path": "Extract-Med.html",
      "title": "Extract-Med",
      "description": "This tutorial describes how to obtain drug dosing information from unstructured clinical notes using *Extract-Med* module in the system.\n",
      "author": [
        {
          "name": "Elizabeth McNeer, Hannah L. Weeks",
          "url": {}
        }
      ],
      "contents": "\n\nContents\nIntroduction\nUnstructured Clinical Notes\nRunning extractMed\nOutput of extractMed\nReferences\n\nSee also “Extract-Med” of “1. EHR Vignette for Extract-Med and Pro-Med-NLP” in EHR package.\nIntroduction\nThis tutorial describes how to use the Extract-Med module to obtain drug dosing information from unstructured clinical notes. The Extract-Med module uses a natural language processing (NLP) system called medExtractR (see Choi et al.\\(^{1}\\) and Weeks et al.\\(^{2}\\) for details).\nTo begin we load the EHR package, and the medExtractR package.\n\n\n# load EHR package and dependency\nlibrary(EHR)\nlibrary(medExtractR)\n\n\n\nUnstructured Clinical Notes\nThe input to medExtractR is a clinical note like the one below.\n\n                                               Clinic Summary - Neurology\nAppointment with **NAME[ZZZ, YYY XXX] on **DATE[Feb 05 2016] 12:30\nNeurology Practice\n**STREET-ADDRESS\n**PLACE Research Bldg\n**PLACE, TN, **ZIP-CODE\n**PHONE\nVital Signs:\n[**DATE[Feb 05 2016] 12:35]: Pulse: 94 bpm; BP: 128/91 mm Hg; O2Sat: 98 %\nHealth Problems (today or in the past):\nEpilepsy\nNeck pain\nHeadache [migrainous]\nMedications:\nlyrica 100mg prn twice daily\nltg 200 mg (1.5) daily\nltg xr 100 mg 3 in am, 2 in pm\nAllergies:\npenicillin (rash)\nClinical Instructions/Patient Education/Decision Aids:\nLabs today\nSignificant Procedures:\n2006: NECK SURGERY\nTobacco usage:\nPatient has smoked in the past 12 months: Yes\nPatient has smoked: Yes (Patient has smoked more than 100 cigarettes-5 packs)\nCurrently smokes: Heavy smoker (smokes more than 10 cigarettes or 1/2 pack per day or equivalent amount of pipe or cigar\ntobacco)\nFunctional Status:\n- Serious difficulty concentrating, remembering, or making decisions.\n- Serious difficulty walking or climbing stairs.\n- Difficulty doing errands alone.\nPlan and Assessment:\nPatient will continue taking Lamotrigine XR 300-200\nElectronically Signed By: **[NAME XXX].\n------------------------------------------------------------------------------------------------------------------------\nHealth Care Team:\n- **NAME[CCC, XXX DDD] - Primary Care Physician\n\nIf we are interested in the medication Lamotrigine, we would need to extract three mentions from the above note:\n“ltg 200 mg (1.5) daily” on line 16\n“ltg xr 100 mg 3 in am, 2 in pm” on line 17\n“Lamotrigine XR 300-200” on line 34\nThe next section demonstrates how to use the extractMed function to run the Extract-Med module using the example clinical note from above.\nRunning extractMed\nThe following arguments must be specified:\nnote_fn: The file name of the note on which to run the system. This can be either a single file name (e.g., \"clinical_note01.txt\") or a vector or list of file names (e.g., c(\"clinical_note01.txt\", \"clinical_note02.txt\") or list(\"clinical_note01.txt\", \"clinical_note02.txt\")).\ndrugnames: Names of the drugs for which we want to extract medication dosing information. This can include any way in which the drug name might be represented in the clinical note, such as generic name (e.g., \"lamotrigine\"), brand name (e.g., \"Lamictal\"), or an abbreviation (e.g., \"LTG\").\ndrgunit: The unit of the drug(s) listed in drugnames, for example \"mg\".\nwindowlength: Length of the search window around each found drug name in which to search for dosing information. There is no default for this argument, requiring the user to carefully consider its value through tuning (see “1. EHR Vignette for Extract-Med and Pro-Med-NLP” for more information on tuning).\nThe window starts at the beginning of the drug mention. For example, a 130 character window for the Lamotrigine mention on line 34 in the example note above would be \"Lamotrigine XR 300-200Electronically Signed By: **[NAME XXX].-------------------------------------------------------------------\"\n\nmax_edit_dist: The maximum edit distance allowed when identifying drugnames. Maximum edit distance determines the difference between two strings, and is defined as the number of insertions, deletions, or substitutions required to change one string into the other. This allows us to capture misspellings in the drug names we are searching for, and its value should be carefully considered through tuning (see “1. EHR Vignette for Extract-Med and Pro-Med-NLP” for more information on tuning).\nThe default value is ‘0’, or exact spelling matches to drugnames. A value of 0 is always used for drug names with less than 5 characters regardless of the value set by max_edit_dist.\nA value of 1 would capture mistakes such as a single missing or extra letter, e.g., “tacrlimus” or “tacroolimus” instead of “tacrolimus”\nA value of 2 would capture these mistakes or a single transposition, e.g. “tcarolimus” instead of “tacrolimus”\nHigher values (3 or above) would capture increasingly more severe mistakes, though setting the value too high can cause similar words to be mistaken as the drug name.\n\nBelow we show how we would run extractMed using the example clinical note from the previous section.\n\n\nmxr_out <- extractMed(note_fn = system.file(\"examples\", \"lampid1_2016-02-05_note5_1.txt\", package = \"EHR\"),\n                       drugnames = c(\"lamotrigine\", \"lamotrigine XR\", \n                                     \"lamictal\", \"lamictal XR\", \n                                     \"LTG\", \"LTG XR\"),\n                       drgunit = \"mg\",\n                       windowlength = 130,\n                       max_edit_dist = 1,\n                       strength_sep=\"-\")\n\n\nrunning notes 1-1 in batch 1 of 1 (100%)\n\nThe additional argument, strength_sep, allows users to specify special characters to separate doses administered at different times of day. For example, consider the drug mention “Lamotrigine XR 300-200” from our example clinical note. This indicates that the patient takes 300 mg of the drug in the morning and 200 mg in the evening. Setting strength_sep = c('-') would allow extractMed to identify 300 and 200 as “Dose” (i.e., dose given intake) since they are separated by the special character “-”. The default value is NULL.\nAnother additional argument allowed in the extractMed function is lastdose. This is a logical input specifying whether or not the last dose time entity should be extracted. Default value is FALSE. See “1. EHR Vignette for Extract-Med and Pro-Med-NLP” and the “Pro-Med-NLP Workshop” for more information on last dose.\nOutput of extractMed\n\n\nmxr_out\n\n\n                         filename       entity           expr       pos\n1  lampid1_2016-02-05_note5_1.txt     DrugName            ltg   442:445\n2  lampid1_2016-02-05_note5_1.txt     Strength         200 mg   446:452\n3  lampid1_2016-02-05_note5_1.txt      DoseAmt            1.5   454:457\n4  lampid1_2016-02-05_note5_1.txt    Frequency          daily   459:464\n5  lampid1_2016-02-05_note5_1.txt     DrugName         ltg xr   465:471\n6  lampid1_2016-02-05_note5_1.txt     Strength         100 mg   472:478\n7  lampid1_2016-02-05_note5_1.txt      DoseAmt              3   479:480\n8  lampid1_2016-02-05_note5_1.txt   IntakeTime          in am   481:486\n9  lampid1_2016-02-05_note5_1.txt      DoseAmt              2   488:489\n10 lampid1_2016-02-05_note5_1.txt   IntakeTime          in pm   490:495\n11 lampid1_2016-02-05_note5_1.txt     DrugName Lamotrigine XR 1125:1139\n12 lampid1_2016-02-05_note5_1.txt DoseStrength        300-200 1140:1147\n\nThe output from the Extract-Med module is a data.frame with 4 columns:\nfilename: The file name of the corresponding clinical note, to label results.\nentity: The label of the entity for the extracted expression.\nexpr: Expression extracted from the clinical note.\npos: Position of the extracted expression in the note, in the format startPosition:stopPosition\nIn the above output, we see that all three lamotrigine mentions from our example clinical note have been extracted, and each expression has been assigned the appropriate entity label and position.\nThe output of extractMed must be saved as a CSV file (see code below), the filename of which will serve as the first input to the Pro-Med-NLP module (see “Pro-Med-NLP Workshop”).\n\n\n# save as csv file\nwrite.csv(mxr_out, file='mxr_out.csv', row.names=FALSE)\n\n\n\nReferences\nChoi L, Beck C, McNeer E, Weeks HL, Williams ML, James NT, Niu X, Abou-Khalil BW, Birdwell KA, Roden DM, Stein CM. Development of a System for Post-marketing Population Pharmacokinetic and Pharmacodynamic Studies using Real-World Data from Electronic Health Records. Clinical Pharmacology & Therapeutics. 2020 Apr;107(4):934-43. doi: 10.1002/cpt.1787.\nWeeks HL, Beck C, McNeer E, Williams ML, Bejan CA, Denny JC, Choi L. medExtractR: A targeted, customizable approach to medication extraction from electronic health records. Journal of the American Medical Informatics Association. 2020 Mar;27(3):407-18. doi: 10.1093/jamia/ocz207.\n\n\n\n",
      "last_modified": "2021-09-30T09:07:06-05:00"
    },
    {
      "path": "index.html",
      "title": "Choi Lab",
      "author": [],
      "contents": "\n\n\n\nLeena Choi, PhD\nProfessor of Biostatistics\nVice Chair of Diversity and Inclusion\nDepartment of Biostatistics\n\n\n\nhttps://www.vumc.org/biostatistics/person/leena-choi-phd\n\nThe major research focus of our lab is to construct a system, called “EHRtoPKPD”, for drug-related studies such as pharmacokinetics (PK), pharmacodynamics (PD), and pharmacogenomics (PGx) studies using electronic health records (EHRs). This system would allow to perform drug-related studie more efficiently by standardizing data extraction, data processing, and data building procedures. This system would provide a foundation for PK/PD-model guided clinical decision support systems embedded in EHRs to provide an optimal pharmacotherapy, the overarching goal of precision medicine.\n\nThe EHRtoPKPD, a System for PK/PD Studies using EHRs.\nModified from Clin Pharm Ther 2020.\nEHRtoPKPD is a modular system, divided into the three major procedures: data extraction (“Extract-”), data processing (“Pro-”), and data building (“Build-”). Modules were created or under development (gray color box) depending on the data element, task to perform, and type of PK/PD models.\nFor drugs with complex prescription pattern, dose data obtained from e-prescription databases may not be accurate enough to perform PK/PD studies. For these drugs, we may need to extract drug dose information from clinical notes using a natural language processing (NLP) system. We developed a flexible and targeted NLP system that can directly extract drug dose information from clinical notes, which was incorporated into our system (Extract-Med).\nBuilding drug dose data from extracted dose information can be challenging. To address these challenges, we developed a dose data building algorithm that was implemented in our system (Pro-Med-NLP).\nFor drugs with simple prescription pattern, dose data can be relatively easily extracted from e-prescription databases and processed using Pro-Med-Str module.\nOther data elements such as drug levels (Pro-Drug Level), demographics (Pro-Demographic), and laboratory data (Pro-Laboratory) can be processed using our system. These data can be combined with processed dose data to build PK/PD data using PK/PD data building modules (i.e., Build-PK-IV, Build-PK-Oral).\nNote:\nThe NLP system is available as an R package, medExtractR, and the functions to run each module are implemented as an R package, EHR. More details can be found in Choi et al.\\(^{1}\\), and additional modules will be added in the future as it evolves.\nAs this package is still in active development, we recommend installing from our GitHub repository with the following command: devtools::install_github(‘choileena/EHR/EHR/’)\n\nLab Team\n\nCole Beck\n\n\nElizabeth McNeer\n\n\nMichael Williams\n\n\nNathan T. James, ScM\n\n\n\n\n\n\n\n\n\nLab Alumni\n\nHannah L. Weeks\n\n\n\nReferences\nChoi L, Beck C, McNeer E, Weeks HL, Williams ML, James NT, Niu X, Abou-Khalil BW, Birdwell KA, Roden DM, Stein CM. Development of a System for Post-marketing Population Pharmacokinetic and Pharmacodynamic Studies using Real-World Data from Electronic Health Records. Clinical Pharmacology & Therapeutics. 2020 Apr;107(4):934-43. doi: 10.1002/cpt.1787.\n\n\n\n",
      "last_modified": "2021-10-04T14:46:03-05:00"
    },
    {
      "path": "PK-Data-IV-Dosing.html",
      "title": "PK Data for IV Dosing",
      "description": "This tutorial introduces the population pharmacokinetic modeling novice to the data format appropriate for most PK model fitting software systems with a focus on intravenous dosing data.\n",
      "author": [
        {
          "name": "Nathan T. James",
          "url": {}
        }
      ],
      "contents": "\n\nContents\nIntroduction\nPopulation PK/PD Data Format\nReferences\n\nUnder construction.\nIntroduction\nWe briefly describe a data format typically used in pharmacokinetics (PK) and pharmacodynamics (PD) modeling, especially relevant to our example intravenous (IV) dosing data. We describe the data form using data items required in NONMEM, which is acceptable in most PK software. More extensive description of data format appropriate for PK software can be found in the manual of each software such as the MONMEM manual\\(^{1}\\).\nPopulation PK/PD Data Format\nHere is an example of data for intravenously administered drugs in a suitable format for PK analysis using most PK software including NONMEM.\nEXAMPE DATA HERE\n\n\nlibrary(EHR)\n# Data generating function for examples\nmkdat <- function() {\n  npat=3\n  visits <- floor(runif(npat, min=2, max=6))\n  id <- rep(1:npat, visits)\n  dt <- as.POSIXct(paste(as.Date(sort(sample(700, sum(visits))), \n                                 origin = '2019-01-01'), '10:00:00'), tz = 'UTC') \n  + rnorm(sum(visits), 0, 1*60*60)\n  dose_morn <- sample(c(2.5,5,7.5,10), sum(visits), replace = TRUE)\n  conc <- round(rnorm(sum(visits), 1.5*dose_morn, 1),1)\n  ld <- dt - sample(10:16, sum(visits), replace = TRUE) * 3600\n  ld[rnorm(sum(visits)) < .3] <- NA\n  age <- rep(sample(40:75, npat), visits)\n  weight <- rep(round(rnorm(npat, 180, 20)),visits)\n  hgb <- round(rep(rnorm(npat, 10, 2), visits),1)\n  data.frame(id, dt, dose_morn, conc, age, weight, hgb, ld)\n}\n\n# Make example data\nset.seed(20)\ndat <- mkdat()\nex <- dat\ndat2 <- dat[,-8]\n\nlibrary(EHR)\n# Build PK data without last-dose times\nexampledata <- run_Build_PK_Oral(x = dat2,\n                  idCol = \"id\",\n                  dtCol = \"dt\",\n                  doseCol = \"dose_morn\",\n                  concCol = \"conc\",\n                  ldCol = NULL,\n                  first_interval_hours = 336,\n                  imputeClosest = NULL)\nexampledata <- exampledata[,c(\"id\",\"time\",\"amt\",\"dv\",\"mdv\",\"evid\",\"addl\",\"II\",\"age\")]\n\n\n\n\n\nexampledata\n\n\n   id   time  amt   dv mdv evid addl II age\n1   1    0.0 10.0   NA   1    1   27 12  46\n2   1  336.0   NA 16.1   0    0   NA NA  46\n3   1  336.5 10.0   NA   1    1  139 12  46\n4   1 2015.0   NA  6.4   0    0   NA NA  46\n5   1 2015.5  5.0   NA   1    1  105 12  46\n6   1 3287.0   NA  5.6   0    0   NA NA  46\n7   1 3287.5  5.0   NA   1    1  285 12  46\n8   1 6720.0   NA  6.6   0    0   NA NA  46\n9   1 6720.5  5.0   NA   1    1  265 12  46\n10  1 9911.0   NA  5.0   0    0   NA NA  46\n11  2    0.0 10.0   NA   1    1   27 12  72\n12  2  336.0   NA 15.1   0    0   NA NA  72\n13  2  336.5 10.0   NA   1    1   65 12  72\n14  2 1128.0   NA 11.7   0    0   NA NA  72\n15  2 1128.5  7.5   NA   1    1   25 12  72\n16  2 1440.0   NA  2.9   0    0   NA NA  72\n17  2 1440.5  2.5   NA   1    1   29 12  72\n18  2 1800.0   NA  2.2   0    0   NA NA  72\n19  2 1800.5  2.5   NA   1    1   29 12  72\n20  2 2160.0   NA  4.3   0    0   NA NA  72\n21  3    0.0  2.5   NA   1    1   27 12  56\n22  3  336.0   NA  3.4   0    0   NA NA  56\n23  3  336.5  2.5   NA   1    1  159 12  56\n24  3 2256.0   NA 10.2   0    0   NA NA  56\n25  3 2256.5  7.5   NA   1    1   17 12  56\n26  3 2472.0   NA  7.5   0    0   NA NA  56\n\nThis simple example has two types of data rows, dose events (information concerning dosing) and concentration events (information concerning blood concentration levels for the drug of interest). The columns indicate the following information:\nid: unique identifier for each individual in the dataset.\ntime: time of either dosing or concentration measurement.\namt: dose amount; NA for concentration events.\ndv: drug blood concentration value, which is DV (dependent variable) as NONMEM data item; NA for a dose event.\nmdv: missing dependent variable; 1 for indicating that there is no dependent variable (in this case, blood concentration), 0 for dependent variable.\nevid: event ID; 1 for indicating dose event (amt, II, and addl for this record will be used for the drug dose information if evid = 1), 0 for observation (or dependent variable if mdv = 0).\nweight: an example covariate; each column can have covariates - these can be time varying or fixed within individual.\nDESCRIPTION OF EXAMPE HERE\nTaking the first row as an example, which is a dose event, a dose of 10 mg is taken at time 0 then 27 additional doses (the same 10 mg) are taken every 12 hours (time can take any unit, or the same unit of time variable). If we calculate each of these 27 doses then we see that the final dose is given at time = 324, 12 hours before the measured concentration of 16.1 in row 2. Of course this same dosing information could be expressed in 28 rows, (10 mg at time 0, 10 mg at time 12, 10 mg at time 24, etc.) but this more compact form is preferable in the presence of a regular dosing interval.\nThis PK data form will be generated using Build-PK-IV module (see Build-PK-IV : Simple or Build-PK-IV : Comprehensive ).\nReferences\nBeal, S.L., Sheiner, L.B., Boeckmann, A.J. & Bauer, R.J. (Eds). NONMEM 7.5 users guides (1989–2020).\n\n\n\n",
      "last_modified": "2021-10-04T14:53:46-05:00"
    },
    {
      "path": "PK-Data-Oral-Dosing.html",
      "title": "PK Data for Oral Dosing",
      "description": "This tutorial introduces the population pharmacokinetic modeling novice to the data format appropriate for most PK model fitting software systems with a focus on oral dosing data.\n",
      "author": [
        {
          "name": "Michael L. Williams",
          "url": {}
        }
      ],
      "contents": "\n\nContents\nIntroduction\nPopulation PK/PD Data Format\nReferences\n\nIntroduction\nWe briefly describe a data format typically used in pharmacokinetics (PK) and pharmacodynamics (PD) modeling, especially relevant to our example oral dosing data. We describe the data form using data items required in NONMEM, which is acceptable in most PK software. More extensive description of data format appropriate for PK software can be found in the manual of each software such as the MONMEM manual\\(^{1}\\).\nPopulation PK/PD Data Format\nHere is an example of data for orally administered drugs in a suitable format for PK analysis using most PK software including NONMEM.\n\n\n\n\n\nexampledata\n\n\n   id   time  amt   dv mdv evid addl II age\n1   1    0.0 10.0   NA   1    1   27 12  46\n2   1  336.0   NA 16.1   0    0   NA NA  46\n3   1  336.5 10.0   NA   1    1  139 12  46\n4   1 2015.0   NA  6.4   0    0   NA NA  46\n5   1 2015.5  5.0   NA   1    1  105 12  46\n6   1 3287.0   NA  5.6   0    0   NA NA  46\n7   1 3287.5  5.0   NA   1    1  285 12  46\n8   1 6720.0   NA  6.6   0    0   NA NA  46\n9   1 6720.5  5.0   NA   1    1  265 12  46\n10  1 9911.0   NA  5.0   0    0   NA NA  46\n11  2    0.0 10.0   NA   1    1   27 12  72\n12  2  336.0   NA 15.1   0    0   NA NA  72\n13  2  336.5 10.0   NA   1    1   65 12  72\n14  2 1128.0   NA 11.7   0    0   NA NA  72\n15  2 1128.5  7.5   NA   1    1   25 12  72\n16  2 1440.0   NA  2.9   0    0   NA NA  72\n17  2 1440.5  2.5   NA   1    1   29 12  72\n18  2 1800.0   NA  2.2   0    0   NA NA  72\n19  2 1800.5  2.5   NA   1    1   29 12  72\n20  2 2160.0   NA  4.3   0    0   NA NA  72\n21  3    0.0  2.5   NA   1    1   27 12  56\n22  3  336.0   NA  3.4   0    0   NA NA  56\n23  3  336.5  2.5   NA   1    1  159 12  56\n24  3 2256.0   NA 10.2   0    0   NA NA  56\n25  3 2256.5  7.5   NA   1    1   17 12  56\n26  3 2472.0   NA  7.5   0    0   NA NA  56\n\nThis simple example has two types of data rows, dose events (information concerning dosing) and concentration events (information concerning blood concentration levels for the drug of interest). The columns indicate the following information:\nid: unique identifier for each individual in the dataset.\ntime: time of either dosing or concentration measurement.\namt: dose amount; NA for concentration events.\ndv: drug blood concentration value, which is DV (dependent variable) as NONMEM data item; NA for a dose event.\nmdv: missing dependent variable; 1 for indicating that there is no dependent variable (in this case, blood concentration), 0 for dependent variable.\nevid: event ID; 1 for indicating dose event (amt, II, and addl for this record will be used for the drug dose information if evid = 1), 0 for observation (or dependent variable if mdv = 0).\naddl: additional doses; the number of times for additional oral dose to be repeated, which is 1 less than total number of repeated (identical) doses.\nII: interdose interval, the amount of time between each additional dose.\nage: an example covariate; each column can have covariates - these can be time varying or fixed within individual.\nTaking the first row as an example, which is a dose event, a dose of 10 mg is taken at time 0 then 27 additional doses (the same 10 mg) are taken every 12 hours (time can take any unit, or the same unit of time variable). If we calculate each of these 27 doses then we see that the final dose is given at time = 324, 12 hours before the measured concentration of 16.1 in row 2. Of course this same dosing information could be expressed in 28 rows, (10 mg at time 0, 10 mg at time 12, 10 mg at time 24, etc.) but this more compact form is preferable in the presence of a regular dosing interval.\nThis PK data form will be generated using Build-PK-Oral module (see Build-PK-Oral).\nReferences\nBeal, S.L., Sheiner, L.B., Boeckmann, A.J. & Bauer, R.J. (Eds). NONMEM 7.5 users guides (1989–2020).\n\n\n\n",
      "last_modified": "2021-10-04T14:51:49-05:00"
    },
    {
      "path": "Pro-Demographic.html",
      "title": "Pro-Demographic",
      "description": "This tutorial describes how to process demographic data using *Pro-Demographic* module in the system.\n",
      "author": [
        {
          "name": "Michael L. Williams",
          "url": {}
        }
      ],
      "contents": "\n\nContents\nIntroduction\nDemographic Data\nPreparing the Demographic Data\nRunning run_Demo\nProcessed Data\nReferences\n\nSee also “Pro-Demographic” in “2. EHR Vignette for Structured Data” of EHR package.\nIntroduction\nThis tutorial describes how to use the Pro-Demographic module to process demographic data (see Choi et al.\\(^{1}\\) for details).\nTo begin we load the EHR package and create some directories to work from.\n\n\n# load EHR package\nlibrary(EHR)\n\ntd <- tempdir()\ncheckDir <- file.path(td, 'checks') # directory for interactive checking\ndir.create(checkDir)\ndataDir <- file.path(td, 'data') # directory for processed data\ndir.create(dataDir)\nrawDataDir <- system.file(\"examples\", \"str_ex2\", package=\"EHR\")\ndrugname <- 'fent'\nLLOQ <- 0.05\n\n\n\nDemographic Data\nWe will use example demographic data to demonstrate the Pro-Demographic module. The raw data is shown below.\n\n\ndemo.in <- read.csv(system.file(\"examples\", \"str_ex2\",\"Demographics_DATA.csv\", package=\"EHR\"))[,c(1,2,3,4,5)]\nhead(demo.in,10)\n\n\n   subject_id subject_uid gender weight height\n1      1106.0    34364670      0   5.14  59.18\n2      1444.0    36792472      1   5.67  62.90\n3      1465.0    36292449      0  23.67 118.02\n4      1520.0    34161967      0  14.07  97.04\n5      1524.0    37857374      1  23.40 102.80\n6      1550.0    37826262      1   6.21  62.03\n7      1566.0    35885929      0 101.32 176.26\n8      1596.0    38340814      1   6.79  62.99\n9      1607.1    38551767      0  10.81  74.95\n10     1607.0    38551767      0   2.76  45.94\n\nEach row in the data represents an individual surgical date. In this case, each individual is assigned a unique ID and has a recorded gender, weight, and height for each surgery. The goal of Pro-Demographic is to make the demographic data suitable for merging with medication data for population pharmacokinetic analysis while apply exclusion criteria in a reproducible manner which preserves and organizes the original data.\nPreparing the Demographic Data\n\n\ntd <- tempdir()\ndir.create(file.path(td, 'data2'))\ndataDir <- file.path(td, 'data2')\n\n\n\nsaveRDS(demo.in, file=file.path(dataDir,\"demo.rds\"))\n\n\n\nRunning run_Demo\nrun_Demo will configure the demographic data, apply exclusion criteria and saving a record of exclusion rules/excluded individuals. The argument toexclude takes an expression evaluating to TRUE/FALSE indicating which individuals will be excluded from the final dataset.\n\n\nlow_wgt <- function(x, val=1) {  x < 6 }\ndemo.out <- run_Demo(demo.path = file.path(dataDir, \"demo.rds\"),\n                     toexclude = expression(low_wgt(weight)))\n\n\nThe number of subjects in the demographic data, who meet the exclusion criteria: 0\n\nProcessed Data\nThe demographic data is now ready for further processing.\n\n\nhead(demo.out)\n\n\n$demo\n   subject_id subject_uid gender weight height\n1      1106.0    34364670      0   5.14  59.18\n2      1444.0    36792472      1   5.67  62.90\n3      1465.0    36292449      0  23.67 118.02\n4      1520.0    34161967      0  14.07  97.04\n5      1524.0    37857374      1  23.40 102.80\n6      1550.0    37826262      1   6.21  62.03\n7      1566.0    35885929      0 101.32 176.26\n8      1596.0    38340814      1   6.79  62.99\n9      1607.1    38551767      0  10.81  74.95\n10     1607.0    38551767      0   2.76  45.94\n11     1724.0    39087607      0   5.21  58.16\n12     1770.1    39418554      1   5.44  60.44\n13     1770.0    39418554      1   5.38  60.39\n14     2157.0    42023523      1   4.20  54.95\n15     2162.0    42044808      0   5.00  55.68\n16     2164.0    41221120      0   5.80  61.90\n17      466.1    28579217      0  21.99 116.90\n18      466.0    28579217      0   9.23  77.08\n\n$exclude\nNULL\n\nReferences\nChoi L, Beck C, McNeer E, Weeks HL, Williams ML, James NT, Niu X, Abou-Khalil BW, Birdwell KA, Roden DM, Stein CM. Development of a System for Post-marketing Population Pharmacokinetic and Pharmacodynamic Studies using Real-World Data from Electronic Health Records. Clinical Pharmacology & Therapeutics. 2020 Apr;107(4):934-43. doi: 10.1002/cpt.1787.\n\n\n\n",
      "last_modified": "2021-09-30T09:14:34-05:00"
    },
    {
      "path": "Pro-DrugLevel.html",
      "title": "Pro-Drug Level",
      "description": "This tutorial describes how to process drug concentration data using *Pro-Drug Level* module in the system.\n",
      "author": [
        {
          "name": "Michael L. Williams",
          "url": {}
        }
      ],
      "contents": "\n\nContents\nIntroduction\nDrug Level Data\nPreparing the Drug Level Data\nRunning run_Druglevel\nProcessed Data\nReferences\n\nSee also “Pro-Drug Level” in “2. EHR Vignette for Structured Data” of EHR package.\nIntroduction\nThis tutorial describes how to use the Pro-Drug Level module to process drug concentration data (see Choi et al.\\(^{1}\\) for details).\nTo begin we load the EHR package.\n\n\n# load EHR package\nlibrary(EHR)\n\n\n\nDrug Level Data\nDrug level data is an essential part of pharmacokinetic (pk) data. It comprises the dependent variable in the model, the response elicited by medication dosing. It is generally measured as drug concentration in the blood calculated in mass per volume.\nWe will use example drug level data from the EHR package. The raw data is shown below.\n\n\n# read Concentration_DATA_simple.csv\nconc.in <- read.csv(system.file(\"examples\", \"str_ex1\",\"Concentration_DATA_simple.csv\",package=\"EHR\"),\n                    stringsAsFactors = FALSE)\nhead(conc.in,10)\n\n\n   patient_id patient_visit_id event conc.level           date.time\n1          10             10.1     4       0.17 2019-02-02 05:30:00\n2          10             10.1     2       4.05 2019-02-24 14:00:00\n3          10             10.1     3       0.64 2019-02-25 03:30:00\n4          10             10.1     5       0.33 2019-02-27 02:45:00\n5          10             10.1     6       0.07 2019-02-28 03:30:00\n6          10             10.1     7       0.05 2019-03-01 02:35:00\n7          10             10.1     8       0.01 2019-03-02 05:06:00\n8           1              1.2     1       0.02 2016-01-07 11:30:00\n9           1              1.2     2       2.83 2016-01-08 13:45:00\n10          1              1.2     3       0.41 2016-01-09 04:11:00\n\nThe goal of Pro-Drug Level is to make this information suitable for merging with medication dosing data for further processing into a complete popPK dataset.\nThe patient ID and patient visit ID may need to be renamed so that all input datasets have the same names for these variables. See “2. EHR Vignette for Structured Data” of the EHR package for more information. We demonstrate how to rename these variables using the dataTransformation function below.\n\n\n\nPreparing the Drug Level Data\nThe data must be saved as an RDS file. Below, we show how to save the data in a temporary directory; however, dataDir can be a specific directory on your computer.\n\n\ntd <- tempdir()\ndir.create(file.path(td, 'data'))\ndataDir <- file.path(td, 'data') # directory for processed data\n \nsaveRDS(conc.new, file=file.path(dataDir,\"conc.rds\"))\n\n\n\nThe next section demonstrates how to use the run_DrugLevel function to run the Pro-Drug Level module.\nRunning run_Druglevel\nrun_Druglevel will configure the drug level data into a form ready for further processing by modules within the EHR package. The following arguments are used:\nconc.path: The file path where the drug level data exist. It must be an RDS file.\nconc.select: The list of variables in the drug level data to be retained.\ncheck.path: Path to a local directory where inconsistencies or possible data errors are saved for expert review.\ndrugname: Drug of interest.\nLLOQ: Lower limit of concentration values. Values below this are invalid.\nBelow we show how we would run run_DrugLevel using the example drug level data from above. We create a temporary directory for the check files, but checkDir can be a specific directory on your computer.\n\n\ndir.create(file.path(td, 'checks'))\ncheckDir <- file.path(td, 'checks') # directory for interactive checking\n\ndrugname <- 'fent'\nLLOQ <- 0.05\n\nconc.out <- run_DrugLevel(conc.path=file.path(dataDir,\"conc.rds\"),\n    conc.select=c('mod_id','mod_id_visit','event','conc.level','date.time'),\n    check.path=checkDir,\n    drugname=drugname,\n    LLOQ=LLOQ)\n\n\nno failures, file /var/folders/06/0qv1dr5508j_tbzqdjfqjf680000gn/T//Rtmp6Wru0v/checks/failMissingConcDate-fent.csv not created\nsubjects with concentration missing from sample file\n[1] mod_id       mod_id_event\n<0 rows> (or 0-length row.names)\n0 subjects have multiple sets of concentration data\n10 total unique subjects ids (including multiple visits) currently in the concentration data\n10 total unique subjects in the concentration data\n#########################\n0 rows need review, see file /var/folders/06/0qv1dr5508j_tbzqdjfqjf680000gn/T//Rtmp6Wru0v/checks/multipleSetsConc-fent2021-09-30.csv\n#########################\n10 total unique subjects ids (after excluding multiple visits) in the concentration data\n10 total unique subjects in the concentration data\n\nIn the above code, our drug of interest is fentanyl, so we set drugname to be fent, and our lower limit of concentration value (LLOQ) is 0.05. The message printed out by the function tells us that 0 subjects need to be reviewed.\nProcessed Data\nThe concentration data is now ready for expert review or further processing by modules in EHR.\n\n\nhead(conc.out)\n\n\n   mod_id mod_id_visit event conc.level           date.time mod_id_event eid\n8       1          1.2     1       0.02 2016-01-07 11:30:00        1.2_1   1\n9       1          1.2     2       2.83 2016-01-08 13:45:00        1.2_2   1\n10      1          1.2     3       0.41 2016-01-09 04:11:00        1.2_3   1\n11      1          1.2     4       0.04 2016-01-11 06:24:00        1.2_4   1\n12      1          1.2     5       0.01 2016-01-12 06:45:00        1.2_5   1\n13      2          2.1     1       0.78 2015-06-14 15:11:00        2.1_1   1\n\nReferences\nChoi L, Beck C, McNeer E, Weeks HL, Williams ML, James NT, Niu X, Abou-Khalil BW, Birdwell KA, Roden DM, Stein CM. Development of a System for Post-marketing Population Pharmacokinetic and Pharmacodynamic Studies using Real-World Data from Electronic Health Records. Clinical Pharmacology & Therapeutics. 2020 Apr;107(4):934-43. doi: 10.1002/cpt.1787.\n\n\n\n",
      "last_modified": "2021-09-30T09:14:19-05:00"
    },
    {
      "path": "Pro-Laboratory.html",
      "title": "Pro-Laboratory",
      "description": "This tutorial describes how to process laboratory data using *Pro-Laboratory* module in the system.\n",
      "author": [
        {
          "name": "Elizabeth McNeer",
          "url": {}
        }
      ],
      "contents": "\n\nContents\nIntroduction\nLaboratory Data\nPreparing Raw Laboratory Data\nRunning run_Labs\nOutput of run_Labs\nReferences\n\nSee also “Pro-Laboratory” in “2. EHR Vignette for Structured Data” of EHR package.\nIntroduction\nThis tutorial describes how to use the Pro-Laboratory module to process laboratory data (see Choi et al.\\(^{1}\\) for details).\nTo begin we load the EHR package.\n\n\n# load EHR package\nlibrary(EHR)\n\n\n\nLaboratory Data\nWe will use example creatinine lab data to demonstrate the Pro-Laboratory module. The raw data is shown below.\n\n\ncreat.in <- read.csv(system.file(\"examples\", \"str_ex2\",\"Creatinine_DATA.csv\", package=\"EHR\"))\nhead(creat.in)\n\n\n  Subject.uniq     date time creat\n1     28579217 02/05/17 4:00  0.52\n2     28579217 02/06/17 5:00  0.53\n3     28579217 10/03/11 4:28  0.42\n4     28579217 10/04/11 4:15  0.35\n5     28579217 10/06/11 4:25  0.29\n6     28579217 10/09/11 4:45  0.28\n\nThis data consists of a patient ID, date, time, and the creatinine level.\nThe patient ID may need to be renamed so that all input datasets have the same name for the patient ID. This is necessary when combining the datasets to create a crosswalk between the original ID variables and the new ID variables used in the Pro-Laboratory module. See “2. EHR Vignette for Structured Data” of the EHR package for more information. We demonstrate how to rename the patient ID variable below.\n\n\ncreat.new <- dataTransformation(creat.in, rename = c('Subject.uniq' = 'subject_uid'))\n\n\n\nPreparing Raw Laboratory Data\nIn practice, the laboratory data will need to be combined with other input datasets. This process involves creating a crosswalk between original ID variables and new ID variables. The new ID variables that are required to be the same across all datasets are mod_id, mod_visit, and mod_id_visit. See “2. EHR Vignette for Structured Data” of EHR package and “Build-PK-IV - Comprehensive Workshop” for examples of this process.\nFor simplicity, we will skip this step in this tutorial.\nWe need to save our dataset as an RDS file using saveRDS as shown below. Here, we create a temporary directory to store the file using tempdir; however, dataDir can be a specific directory on your computer.\n\n\ntd <- tempdir()\ndir.create(file.path(td, 'data2'))\ndataDir <- file.path(td, 'data2')\nsaveRDS(creat.new, file=file.path(dataDir,\"creat_new.rds\"))\n\n\n\nThe next section demonstrates how to use the run_Labs function to run the Pro-Laboratory module.\nRunning run_Labs\nThe following arguments must be specified:\nlab.path: The file path where the laboratory data exist. It must be an RDS file.\nlab.select: The list of variables in the laboratory data to be retained.\nlab.mod.list: A list containing modifications to variables in the laboratory data.\nBelow we show how we would run run_Labs using the example laboratory data from above.\n\n\ncreat.out <- run_Labs(lab.path=file.path(dataDir,\"creat_new.rds\"),\n    lab.select = c('subject_uid','date.time','creat'),\n    lab.mod.list = list(date.time = expression(parse_dates(fixDates(paste(date, time))))))\n\n\n\nIn the above code, the lab.mod.list argument specifies a modification to our dataset to include a date.time variable, which is created by combining the original date and time variables. The lab.select argument says that we want to keep the subject_uid, date.time, and creat variables.\nOutput of run_Labs\n\n\nhead(creat.out)\n\n\n  subject_uid           date.time creat\n1    28579217 2017-02-05 04:00:00  0.52\n2    28579217 2017-02-06 05:00:00  0.53\n3    28579217 2011-10-03 04:28:00  0.42\n4    28579217 2011-10-04 04:15:00  0.35\n5    28579217 2011-10-06 04:25:00  0.29\n6    28579217 2011-10-09 04:45:00  0.28\n\nThis data can be merged with data from other modules. See the “Build-PK-IV - Comprehensive Workshop” for an example.\nReferences\nChoi L, Beck C, McNeer E, Weeks HL, Williams ML, James NT, Niu X, Abou-Khalil BW, Birdwell KA, Roden DM, Stein CM. Development of a System for Post-marketing Population Pharmacokinetic and Pharmacodynamic Studies using Real-World Data from Electronic Health Records. Clinical Pharmacology & Therapeutics. 2020 Apr;107(4):934-43. doi: 10.1002/cpt.1787.\n\n\n\n",
      "last_modified": "2021-09-30T09:14:58-05:00"
    },
    {
      "path": "Pro-Med-NLP.html",
      "title": "Pro-Med-NLP",
      "description": "This tutorial describes how to build longitudinal medication dose data from the raw output of an NLP system using the *Pro-Med-NLP* module.\n",
      "author": [
        {
          "name": "Elizabeth McNeer, Hannah L. Weeks",
          "url": {}
        }
      ],
      "contents": "\n\nContents\nIntroduction\nPart IParse functions\nRunning parseMedExtractR\nbuildDose\nRunning buildDose\n\nPart IInoteMetaData\ncollapseDose\nRunning collapseDose\n\nHandling lastdoseRunning collapseDose with last dose present\n\nReferences\n\n\n\n\nSee also “Pro-Med-NLP” of “1. EHR Vignette for Extract-Med and Pro-Med-NLP” in EHR package.\nIntroduction\nThis tutorial describes how to use the Pro-Med-NLP module to generate longitudinal medication dose data from the raw output of an NLP system. The module is divided into two parts. Part I parses the raw output and pairs entities together, and Part II calculates dose intake and daily dose and removes redundant information (see Choi et al.\\(^{1}\\) and McNeer et al.\\(^{2}\\) for details).\nTo begin we load the EHR package.\n\n\n# load EHR package\nlibrary(EHR)\n\n\n\nPart I\nTwo main functions are used in this part of the module, a parse function and buildDose.\nParse functions\nParse functions are available for the medExtractR, MedXN, CLAMP, and MedEx systems (parseMedExtractR, parseMedXN, parseCLAMP, parseMedEx). If the user has output from another NLP system, the user can write code to standardize the output before calling the buildDose function.\nIn this tutorial, we will demonstrate the process using the parseMedExtractR function. See “1. EHR Vignette for Extract-Med and Pro-Med-NLP” in the EHR package for details on the other parse functions.\nThe parse functions output a standardized form of the data that includes a row for each drug mention and columns for all entities anchored to that drug mention.\nRunning parseMedExtractR\nFirst, we create variables for the filenames of our raw NLP system data. In the EHR package, we have example medExtractR data for tacrolimus and lamotrigine.\n\n\ntac_mxr_fn <- system.file(\"examples\", \"tac_mxr.csv\", package = \"EHR\")\nlam_mxr_fn <- system.file(\"examples\", \"lam_mxr.csv\", package = \"EHR\")\n\n\n\nBelow is the example medExtractR output for tacrolimus:\n\n\n(tac_mxr <- read.csv(file.path(tac_mxr_fn),stringsAsFactors = FALSE))\n\n\n                         filename     entity        expr       pos\n1  tacpid1_2008-06-26_note1_1.txt   DrugName     Prograf   930:937\n2  tacpid1_2008-06-26_note1_1.txt   Strength        1 mg   951:955\n3  tacpid1_2008-06-26_note1_1.txt    DoseAmt           3   956:957\n4  tacpid1_2008-06-26_note1_1.txt  Frequency twice a day   976:987\n5  tacpid1_2008-06-26_note1_1.txt   DrugName     prograf 2709:2716\n6  tacpid1_2008-06-26_note1_1.txt       Dose         3mg 2717:2720\n7  tacpid1_2008-06-26_note1_1.txt  Frequency         bid 2721:2724\n8  tacpid1_2008-06-26_note1_1.txt   LastDose      8:30pm 2740:2746\n9  tacpid1_2008-06-26_note2_1.txt   DrugName     Prograf   618:625\n10 tacpid1_2008-06-26_note2_1.txt   Strength        1 mg   639:643\n11 tacpid1_2008-06-26_note2_1.txt    DoseAmt           3   644:645\n12 tacpid1_2008-06-26_note2_1.txt  Frequency twice a day   664:675\n13 tacpid1_2008-06-26_note2_1.txt   LastDose       14 hr   678:683\n14 tacpid1_2008-12-16_note3_1.txt   DrugName  Tacrolimus   722:732\n15 tacpid1_2008-12-16_note3_1.txt   DrugName     Prograf   761:768\n16 tacpid1_2008-12-16_note3_1.txt   Strength        1 mg   770:774\n17 tacpid1_2008-12-16_note3_1.txt    DoseAmt           3   775:776\n18 tacpid1_2008-12-16_note3_1.txt  Frequency twice a day   795:806\n19 tacpid1_2008-12-16_note3_1.txt DoseChange    decrease 2170:2178\n20 tacpid1_2008-12-16_note3_1.txt   DrugName     Prograf 2179:2186\n21 tacpid1_2008-12-16_note3_1.txt       Dose         2mg 2190:2193\n22 tacpid1_2008-12-16_note3_1.txt  Frequency         bid 2194:2197\n23 tacpid1_2008-12-16_note3_1.txt   DrugName     Prograf 2205:2212\n24 tacpid1_2008-12-16_note3_1.txt   LastDose    10:30 pm 2231:2239\n\nHere we demonstrate how to run parseMedExtractR using the raw medExtractR output from above.\n\n\ntac_mxr_parsed <- parseMedExtractR(tac_mxr_fn)\nlam_mxr_parsed <- parseMedExtractR(lam_mxr_fn)\n\n\n\nThe output from all systems, once parsed, has the same structure as the example parsed medExtractR output below.\n\n\ntac_mxr_parsed\n\n\n                         filename             drugname       strength        dose route                  freq         dosestr\n1: tacpid1_2008-06-26_note1_1.txt    Prograf::930::937 1 mg::951::955 3::956::957       twice a day::976::987                \n2: tacpid1_2008-06-26_note1_1.txt  prograf::2709::2716                                        bid::2721::2724 3mg::2717::2720\n3: tacpid1_2008-06-26_note2_1.txt    Prograf::618::625 1 mg::639::643 3::644::645       twice a day::664::675                \n4: tacpid1_2008-12-16_note3_1.txt Tacrolimus::722::732                                                                       \n5: tacpid1_2008-12-16_note3_1.txt    Prograf::761::768 1 mg::770::774 3::775::776       twice a day::795::806                \n6: tacpid1_2008-12-16_note3_1.txt  Prograf::2179::2186                                        bid::2194::2197 2mg::2190::2193\n7: tacpid1_2008-12-16_note3_1.txt  Prograf::2205::2212                                                                       \n             dosechange             lastdose\n1:                                          \n2:                        8:30pm::2740::2746\n3:                           14 hr::678::683\n4:                                          \n5:                                          \n6: decrease::2170::2178                     \n7:                      10:30 pm::2231::2239\n\n\n\nlam_mxr_parsed\n\n\n                          filename                 drugname         strength                        dose route\n 1: lampid1_2016-02-05_note4_1.txt       Lamictal::810::818                                                   \n 2: lampid1_2016-02-05_note4_1.txt    Lamotrigine::847::858  200mg::859::864               1.5::865::868      \n 3: lampid1_2016-02-05_note4_1.txt Lamotrigine XR::954::968 100 mg::969::975 3::1000::1001`2::1037::1038      \n 4: lampid1_2016-02-05_note5_1.txt            ltg::442::445 200 mg::446::452               1.5::454::457      \n 5: lampid1_2016-02-05_note5_1.txt         ltg xr::465::471 100 mg::472::478     3::479::480`2::488::489      \n 6: lampid2_2008-07-20_note6_1.txt  lamotrigine::1267::1278                                                   \n 7: lampid2_2008-07-20_note6_1.txt     lamictal::1280::1288                                                   \n 8: lampid2_2008-07-20_note6_1.txt     Lamictal::2273::2281                                                   \n 9: lampid2_2012-04-15_note7_1.txt    lamotrigine::103::114 150 mg::115::121                                  \n10: lampid2_2012-04-15_note7_1.txt       Lamictal::141::149                                  1::151::152      \n                                       freq            dosestr           dosechange lastdose\n 1:                           BID::826::829   300 mg::819::825                              \n 2:                   twice daily::873::884                                                 \n 3: morning::1025::1032`evening::1062::1069                                                 \n 4:                         daily::459::464                                                 \n 5:         in am::481::486`in pm::490::495                                                 \n 6:                                                                                         \n 7:                        q12h::1299::1303 150 mg::1289::1295                              \n 8:                         BID::2294::2297  200mg::2285::2290 Increase::2264::2272         \n 9:                                                                                         \n10:                   twice a day::169::180                                                 \n\nWe now have a single row for each drug mention, but we need to pair appropriate entities together. For example, the third lamotrigine mention has two different doses and two different frequencies. The dose of “3” should be paired with the frequency “morning”, and the dose of “2” should be paired with the frequency “evening”. In the next section, we describe how to use the buildDose function to process this parsed data.\nbuildDose\nAfter the NLP output is parsed, the buildDose function is run to pair the parsed entities. The main buildDose function arguments are as follows:\ndat: standardized form of the data (i.e., output from one of the parse functions)\ndn: argument to specify drug names of interest (generally not used with medExtractR since medExtractR is a targeted system and only includes the drug of interest in the raw output)\nThe output of the buildDose function is a dataset with a column for each entity and a row for each pairing.\nRunning buildDose\nIn our medExtractR example from above, the output of the buildDose function is the following:\n\n\n(tac_part_i_out <- buildDose(tac_mxr_parsed))\n\n\n                        filename   drugname strength dose route        freq dosestr dosechange lastdose drugname_start\n1 tacpid1_2008-06-26_note1_1.txt    Prograf     1 mg    3    NA twice a day    <NA>       <NA>     <NA>            930\n2 tacpid1_2008-06-26_note1_1.txt    prograf     <NA> <NA>    NA         bid     3mg       <NA>   8:30pm           2709\n3 tacpid1_2008-06-26_note2_1.txt    Prograf     1 mg    3    NA twice a day    <NA>       <NA>    14 hr            618\n4 tacpid1_2008-12-16_note3_1.txt Tacrolimus     <NA> <NA>    NA        <NA>    <NA>       <NA>     <NA>            722\n5 tacpid1_2008-12-16_note3_1.txt    Prograf     1 mg    3    NA twice a day    <NA>       <NA>     <NA>            761\n6 tacpid1_2008-12-16_note3_1.txt    Prograf     <NA> <NA>    NA         bid     2mg   decrease     <NA>           2179\n7 tacpid1_2008-12-16_note3_1.txt    Prograf     <NA> <NA>    NA        <NA>    <NA>       <NA> 10:30 pm           2205\n\n(lam_part_i_out <- buildDose(lam_mxr_parsed))\n\n\n                         filename       drugname strength dose route        freq dosestr dosechange lastdose drugname_start\n1  lampid1_2016-02-05_note4_1.txt       Lamictal     <NA> <NA>  <NA>         BID  300 mg       <NA>     <NA>            810\n2  lampid1_2016-02-05_note4_1.txt    Lamotrigine    200mg  1.5  <NA> twice daily    <NA>       <NA>     <NA>            847\n3  lampid1_2016-02-05_note4_1.txt Lamotrigine XR   100 mg    3  <NA>     morning    <NA>       <NA>     <NA>            954\n4  lampid1_2016-02-05_note4_1.txt Lamotrigine XR   100 mg    2  <NA>     evening    <NA>       <NA>     <NA>            954\n5  lampid1_2016-02-05_note5_1.txt            ltg   200 mg  1.5  <NA>       daily    <NA>       <NA>     <NA>            442\n6  lampid1_2016-02-05_note5_1.txt         ltg xr   100 mg    3  <NA>       in am    <NA>       <NA>     <NA>            465\n7  lampid1_2016-02-05_note5_1.txt         ltg xr   100 mg    2  <NA>       in pm    <NA>       <NA>     <NA>            465\n8  lampid2_2008-07-20_note6_1.txt    lamotrigine     <NA> <NA>  <NA>        <NA>    <NA>       <NA>     <NA>           1267\n9  lampid2_2008-07-20_note6_1.txt       lamictal     <NA> <NA>  <NA>        q12h  150 mg       <NA>     <NA>           1280\n10 lampid2_2008-07-20_note6_1.txt       Lamictal     <NA> <NA>  <NA>         BID   200mg   Increase     <NA>           2273\n11 lampid2_2012-04-15_note7_1.txt    lamotrigine   150 mg <NA>  <NA>        <NA>    <NA>       <NA>     <NA>            103\n12 lampid2_2012-04-15_note7_1.txt       Lamictal     <NA>    1  <NA> twice a day    <NA>       <NA>     <NA>            141\n\nWe see that the third mention in the lamotrigine dataset now has two rows (rows 3 and 4), one with a dose of “3” and a frequency of “morning” and one with a dose of “2” and a frequency of “evening”. The “drugname_start” column gives us the start position for the drug name, which tells us that these two rows come from the same mention.\nIf the checkForRare argument is set to TRUE, any extracted expressions with a proportion of occurrence less than 0.2 are returned as rare values. When rare values are identified, a warning is printed to notify the user. The var column indicates the entity (note that dose in this output refers to dose amount, while dosestr would indicate dose given intake). This can be used as a quick check for potentially inaccurate information and allow the user to remove incorrect extractions before applying the Pro-Med-NLP module as incorrect extractions would reduce accuracy of the dose building data. Note that these values may still be correct extractions even though they are rare, as is the case for our output below.\n\n\nlam_checkForRare <- buildDose(lam_mxr_parsed, checkForRare=TRUE)\n\n\n       var   val Freq       Prop\n1 drugname   ltg    1 0.08333333\n2 strength 150mg    1 0.14285714\n3     dose     1    1 0.14285714\n\nPart II\nIn Part II of the module, we form the final analysis datasets containing computed dosing information at the note and date level for each patient. This process requires more detailed meta data associated with each clinical note file, the format of which is described below.\nnoteMetaData\nThe meta data argument is required by the functions collapseDose and processLastDose, and requires four columns: filename, pid, date, note. In our example data, pid (patient ID), date, and note can all be extracted from the filename. Take the filename “tacpid1_2008-06-26_note1_1.txt” for example. It contains information in the form “[PID]_[date]_[note]”, where PID = “tacpid1”, date = “2008-06-26” and note = “note1”. The function below can build our meta data from each of the filenames.\n\n\nbmd <- function(x) {\n  fns <- strsplit(x, '_')\n  pid <- sapply(fns, `[`, 1)\n  date <- as.Date(sapply(fns, `[`, 2), format = '%Y-%m-%d')\n  note <- sapply(fns, `[`, 3)\n  data.frame(filename = x, pid, date, note, stringsAsFactors = FALSE)\n}\nbmd(\"tacpid1_2008-06-26_note1_1.txt\")\n\n\n                        filename     pid       date  note\n1 tacpid1_2008-06-26_note1_1.txt tacpid1 2008-06-26 note1\n\n(tac_metadata <- bmd(tac_part_i_out[['filename']]))\n\n\n                        filename     pid       date  note\n1 tacpid1_2008-06-26_note1_1.txt tacpid1 2008-06-26 note1\n2 tacpid1_2008-06-26_note1_1.txt tacpid1 2008-06-26 note1\n3 tacpid1_2008-06-26_note2_1.txt tacpid1 2008-06-26 note2\n4 tacpid1_2008-12-16_note3_1.txt tacpid1 2008-12-16 note3\n5 tacpid1_2008-12-16_note3_1.txt tacpid1 2008-12-16 note3\n6 tacpid1_2008-12-16_note3_1.txt tacpid1 2008-12-16 note3\n7 tacpid1_2008-12-16_note3_1.txt tacpid1 2008-12-16 note3\n\ncollapseDose\nThe main function used in Part II of the module is the collapseDose function. The output of this function is the final dose data with entities standardized, missing values imputed, dose intake and daily dose calculated, and redundancies removed. Two data.frames are generated one with redundancies removed at the note level and one at the date level (see McNeer et al. (2020) for details).\ncollapseDose allows the user to split the data using drug names given by regular expressions (...). For example, if the data includes multiple drugs, regular expressions can be specified for each drug. Another use of this function is to split the data by different formulations of the drug, such as separating immediate release formulations from extended release formulations, which are often written using “XR” or “ER” in the drug name.\nThe collapseDose function requires the following arguments:\nx: output from the buildDose function, or from addLastDose if last dose information is incorporated (see Handling lastDose section below)\nnoteMetaData: a data.frame with columns for filename, pid (patient id), date, and note\nnaFreq: method to use when assigning missing frequencies; the default is to assign the most common frequency\nRunning collapseDose\nBelow, we demonstrate collapseDose using our lamotrigine example. In the function call, we supply an additional argument 'xr|er' to indicate that we want to separately consider extended release formulations of lamotrigine, (usually denoted by “XR” or “ER”). This prevents regular lamotrigine mentions from being collapsed with lamotrigine XR mentions, even if the dosage is identical.\n\n\ndata(lam_metadata, package = 'EHR')\nlam_part_ii <- collapseDose(lam_part_i_out, lam_metadata, naFreq = 'most', 'xr|er')\n\n\n\n\n\n\nNote level collapsing:\n\n\nlam_part_ii$note\n\n\n                        filename       drugname strength dose  route  freq dosestr dosechange lastdose drugname_start dosestr.num\n1 lampid1_2016-02-05_note4_1.txt       Lamictal     <NA> <NA> orally   bid  300 mg       <NA>     <NA>            810         300\n2 lampid1_2016-02-05_note4_1.txt Lamotrigine XR   100 mg    3 orally    am    <NA>       <NA>     <NA>            954          NA\n3 lampid1_2016-02-05_note4_1.txt Lamotrigine XR   100 mg    2 orally    pm    <NA>       <NA>     <NA>            954          NA\n4 lampid1_2016-02-05_note5_1.txt            ltg   200 mg  1.5 orally daily    <NA>       <NA>     <NA>            442          NA\n5 lampid1_2016-02-05_note5_1.txt         ltg xr   100 mg    3 orally    am    <NA>       <NA>     <NA>            465          NA\n6 lampid1_2016-02-05_note5_1.txt         ltg xr   100 mg    2 orally    pm    <NA>       <NA>     <NA>            465          NA\n7 lampid2_2008-07-20_note6_1.txt       lamictal     <NA> <NA> orally   bid  150 mg       <NA>     <NA>           1280         150\n8 lampid2_2008-07-20_note6_1.txt       Lamictal     <NA> <NA> orally   bid   200mg   Increase     <NA>           2273         200\n9 lampid2_2012-04-15_note7_1.txt       Lamictal     <NA>    1 orally   bid    <NA>       <NA>     <NA>            141          NA\n  strength.num doseamt.num freq.num dose.intake intaketime dose.seq dose.daily\n1           NA          NA        2         300       <NA>       NA        600\n2          100         3.0        1         300         am        1        500\n3          100         2.0        1         200         pm        2        500\n4          200         1.5        1         300       <NA>       NA        300\n5          100         3.0        1         300         am        1        500\n6          100         2.0        1         200         pm        2        500\n7           NA          NA        2         150       <NA>       NA        300\n8           NA          NA        2         200       <NA>       NA        400\n9          150         1.0        2         150       <NA>       NA        300\n\nDate level collapsing:\n\n\nlam_part_ii$date\n\n\n                        filename       drugname strength dose  route  freq dosestr dosechange lastdose drugname_start dosestr.num\n1 lampid1_2016-02-05_note4_1.txt       Lamictal     <NA> <NA> orally   bid  300 mg       <NA>     <NA>            810         300\n2 lampid1_2016-02-05_note4_1.txt Lamotrigine XR   100 mg    3 orally    am    <NA>       <NA>     <NA>            954          NA\n3 lampid1_2016-02-05_note4_1.txt Lamotrigine XR   100 mg    2 orally    pm    <NA>       <NA>     <NA>            954          NA\n4 lampid1_2016-02-05_note5_1.txt            ltg   200 mg  1.5 orally daily    <NA>       <NA>     <NA>            442          NA\n5 lampid2_2008-07-20_note6_1.txt       lamictal     <NA> <NA> orally   bid  150 mg       <NA>     <NA>           1280         150\n6 lampid2_2008-07-20_note6_1.txt       Lamictal     <NA> <NA> orally   bid   200mg   Increase     <NA>           2273         200\n7 lampid2_2012-04-15_note7_1.txt       Lamictal     <NA>    1 orally   bid    <NA>       <NA>     <NA>            141          NA\n  strength.num doseamt.num freq.num dose.intake intaketime dose.seq dose.daily\n1           NA          NA        2         300       <NA>       NA        600\n2          100         3.0        1         300         am        1        500\n3          100         2.0        1         200         pm        2        500\n4          200         1.5        1         300       <NA>       NA        300\n5           NA          NA        2         150       <NA>       NA        300\n6           NA          NA        2         200       <NA>       NA        400\n7          150         1.0        2         150       <NA>       NA        300\n\nIn the final datasets above, we see that a daily dose has been calculated and redundant daily doses have been removed at either the note or date level.\nHandling lastdose\nIn this section, we cover how incorporation of the last dose entity should be handled if it was extracted using medExtractR. In the Running buildDose section above, we see the raw last dose time extractions for the tacrolimus dataset. Using the functions processLastDose and addLastDose, we convert the extracted times into a processed and standardized datetime variable, and add the processed times to the buildDose output.\nThe processLastDose function requires the following arguments:\nmxrData: raw output from the extractMed function\nnoteMetaData: note meta data for each file name in mxrData\nlabData: a data frame containing lab dates and times associated with the file names within mxrData. This must contain at a minimum the columns pid and date (in the same format as noteMetaData), as well as labtime, a POSIXct variable indicating the date and time of a laboratory drug measurement\nExtracted last dose times can fall into two categories: a time expression (e.g., “10am”, “22:00”, “7 last night”) or a duration expression (e.g. “14 hour” level), where the “time” of last dose indicates the number of hours since the last dose was taken relative to the time of the clinical visit. In the latter case, the lab time (from the labData argument) is needed in order to convert the extracted duration expression into a datetime variable. Below is an example lab dataset for our sample tacrolimus data.\n\n\ndata(tac_lab, package = 'EHR')\ntac_lab\n\n\n      pid       date             labtime\n1 tacpid1 2008-06-26 2008-06-26 10:42:00\n2 tacpid1 2008-12-16 2008-12-16 12:11:00\n\nWithin processLastDose, extracted times are converted to time expressions of the format “HH:MM:SS” and assigned a date based on the date of the corresponding note. When the last dose time is after 12pm, it is assumed to have been taken on the previous date.\n\n\n(tac_ld <- processLastDose(mxrData = tac_mxr, noteMetaData = tac_metadata, labData = tac_lab))\n\n\n                        filename            lastdose    ld_pos     pid       date raw_time ld_start time_type             labtime\n1 tacpid1_2008-06-26_note1_1.txt 2008-06-25 20:30:00 2740:2746 tacpid1 2008-06-26   8:30pm     2740      time 2008-06-26 10:42:00\n2 tacpid1_2008-06-26_note2_1.txt 2008-06-25 20:42:00   678:683 tacpid1 2008-06-26    14 hr      678  duration 2008-06-26 10:42:00\n3 tacpid1_2008-12-16_note3_1.txt 2008-12-15 22:30:00 2231:2239 tacpid1 2008-12-16 10:30 pm     2231      time 2008-12-16 12:11:00\n\nThe function output contains the processed and standardized last dose time (lastdose), the original extracted expression (raw_time), whether the raw expression was a time or duration (time_type), as well as position information for the last dose time (ld_start) for appropriate pairing with dosing information in addLastDose. The labtime column in the output above corresponds to the information provided in the labData argument.\nThe addLastDose function requires the following arguments:\nbuildData: output from buildDose\nlastdoseData: dataset containing last dose time information for the file names in buildData. This should include columns for filename and lastdose, with lastdose being a processed POSIXct datetime variable.\nIn the case where last dose information was extracted from clinical notes using medExtractR, the lastdoseData input should be output from the processLastDose function containing the last dose start positions, as demonstrated below. It is possible for multiple times to be extracted from a clinical note. For extracted times within a 2 hour window of one another, addLastDose treats these as equivalent and extracts the last dose time. Note that this may be context-dependent, and this rule was determined based on drugs administered every 12 hours and assuming a trough drug level. For time differences of more than two hours, the last dose start position is used to pair the extracted time with the closest drug mention. Alternatively, if the user has a separate dataset with validated last dose times, they can provide their own dataset. When providing a validated dataset, there should be only one last dose time per patient ID and date.\n\n\n(tac_part_i_out_lastdose <- addLastDose(buildData = tac_part_i_out, lastdoseData = tac_ld))\n\n\n                        filename   drugname strength dose route        freq dosestr dosechange            lastdose drugname_start\n1 tacpid1_2008-06-26_note1_1.txt    Prograf     1 mg    3    NA twice a day    <NA>       <NA>                <NA>            930\n2 tacpid1_2008-06-26_note1_1.txt    prograf     <NA> <NA>    NA         bid     3mg       <NA> 2008-06-25 20:30:00           2709\n3 tacpid1_2008-06-26_note2_1.txt    Prograf     1 mg    3    NA twice a day    <NA>       <NA> 2008-06-25 20:42:00            618\n4 tacpid1_2008-12-16_note3_1.txt Tacrolimus     <NA> <NA>    NA        <NA>    <NA>       <NA>                <NA>            722\n5 tacpid1_2008-12-16_note3_1.txt    Prograf     1 mg    3    NA twice a day    <NA>       <NA>                <NA>            761\n6 tacpid1_2008-12-16_note3_1.txt    Prograf     <NA> <NA>    NA         bid     2mg   decrease                <NA>           2179\n7 tacpid1_2008-12-16_note3_1.txt    Prograf     <NA> <NA>    NA        <NA>    <NA>       <NA> 2008-12-15 22:30:00           2205\n\nNote that in the lastdose columns, we now have standardized datetime objects instead of the raw extracted expressions.\nRunning collapseDose with last dose present\nFor our tacrolimus example above, the output of collapseDose is below. Note that we use the output from addLastDose rather than directly from buildDose.\n\n\ntac_part_ii <- collapseDose(tac_part_i_out_lastdose, tac_metadata, naFreq = 'most')\n\n\n\n\n\n\nNote level collapsing:\n\n\ntac_part_ii$note\n\n\n                        filename drugname strength dose  route freq dosestr dosechange            lastdose drugname_start dosestr.num\n1 tacpid1_2008-06-26_note1_1.txt  Prograf     1 mg    3 orally  bid    <NA>       <NA> 2008-06-25 20:30:00            930          NA\n2 tacpid1_2008-06-26_note2_1.txt  Prograf     1 mg    3 orally  bid    <NA>       <NA> 2008-06-25 20:42:00            618          NA\n3 tacpid1_2008-12-16_note3_1.txt  Prograf     1 mg    3 orally  bid    <NA>       <NA> 2008-12-15 22:30:00            761          NA\n4 tacpid1_2008-12-16_note3_1.txt  Prograf     <NA> <NA> orally  bid     2mg   decrease 2008-12-15 22:30:00           2179           2\n  strength.num doseamt.num freq.num dose.intake intaketime dose.seq dose.daily\n1            1           3        2           3       <NA>       NA          6\n2            1           3        2           3       <NA>       NA          6\n3            1           3        2           3       <NA>       NA          6\n4           NA          NA        2           2       <NA>       NA          4\n\nDate level collapsing:\n\n\ntac_part_ii$date\n\n\n                        filename drugname strength dose  route freq dosestr dosechange            lastdose drugname_start dosestr.num\n1 tacpid1_2008-06-26_note1_1.txt  Prograf     1 mg    3 orally  bid    <NA>       <NA> 2008-06-25 20:30:00            930          NA\n2 tacpid1_2008-06-26_note2_1.txt  Prograf     1 mg    3 orally  bid    <NA>       <NA> 2008-06-25 20:42:00            618          NA\n3 tacpid1_2008-12-16_note3_1.txt  Prograf     1 mg    3 orally  bid    <NA>       <NA> 2008-12-15 22:30:00            761          NA\n4 tacpid1_2008-12-16_note3_1.txt  Prograf     <NA> <NA> orally  bid     2mg   decrease 2008-12-15 22:30:00           2179           2\n  strength.num doseamt.num freq.num dose.intake intaketime dose.seq dose.daily\n1            1           3        2           3       <NA>       NA          6\n2            1           3        2           3       <NA>       NA          6\n3            1           3        2           3       <NA>       NA          6\n4           NA          NA        2           2       <NA>       NA          4\n\nReferences\nChoi L, Beck C, McNeer E, Weeks HL, Williams ML, James NT, Niu X, Abou-Khalil BW, Birdwell KA, Roden DM, Stein CM. Development of a System for Post-marketing Population Pharmacokinetic and Pharmacodynamic Studies using Real-World Data from Electronic Health Records. Clinical Pharmacology & Therapeutics. 2020 Apr;107(4):934-43. doi: 10.1002/cpt.1787.\nMcNeer E, Beck C, Weeks HL, Williams ML, James NT, Bejan CA, Choi L. Building Longitudinal Medication Dose Data Using Medication Information Extracted from Clinical Notes in Electronic Health Records. J Am Med Inform Assoc. 2021 Mar 18;28(4):782-790. doi: 10.1093/jamia/ocaa291.\n\n\n\n",
      "last_modified": "2021-09-30T09:17:00-05:00"
    },
    {
      "path": "Pro-Med-Str-Part1.html",
      "title": "Pro-Med-Str - Part I",
      "description": "This tutorial describes how to process structured medication data, especially focusing on intravenously given dose data.\n",
      "author": [],
      "contents": "\n\nContents\nIntroduction\nInput Raw Dose Data\nPreparing Raw Dose Data\nRunning run_MedStrI()\nOutput of run_MedStrI()\nReferences\n\nSee also “Pro-Med-Str Part I: IV dose data” in “2. EHR Vignette for Structured Data” of EHR package.\nIntroduction\nThis tutorial describes how to use the Pro-Med-Str - Part I module in EHRtoPKPD system to process intravenous (IV) dose data (see Choi et al.\\(^{1}\\) for details).\nTo begin we load the EHR package,\n\n\n# load EHR package\nlibrary(EHR)\n\n\n\nInput Raw Dose Data\nWe will use example dose data to demonstrate the Pro-Med-Str Part I module. The raw data is shown below.\n\n\nmar.in0 <- read.csv(system.file(\"examples\", \"str_ex2\",\"MAR_DATA.csv\", package=\"EHR\"), check.names = FALSE)\nhead(mar.in0)\n\n\n   Uniq.Id       Date  Time                 med:mDrug   med:dosage med:route med:freq med:given\n1 28579217 2017-02-04 19:15               Nicardipine 3 mcg/kg/min        IV     <NA>     Given\n2 28579217 2011-10-02 22:11                Famotidine       4.5 mg        IV   q12hrs     Given\n3 28579217 2011-10-02 20:17          Morphine sulfate         1 mg        IV  q2h prn     Given\n4 28579217 2011-10-03 02:28 Diphenhydramine injection        12 mg        IV      now     Given\n5 28579217 2011-10-02 22:11                 Cefazolin       225 mg        IV    q8hrs     Given\n6 28579217 2011-10-02 23:30          Morphine sulfate         1 mg        IV  q2h prn     Given\n\nThis data consists of a patient ID, date, time, medication name, dosage, route, frequency, and medication given.\nThe patient ID may need to be renamed so that all input datasets have the same name for the patient ID. This is necessary when combining the datasets to create a crosswalk between the original ID variables and the new ID variables used in the Pro-Med-Str Part I module. We demonstrate how to rename the patient ID variable below.\n\n\nmar.new <- dataTransformation(mar.in0, rename = c('Uniq.Id' = 'subject_uid'))\n\n\n\nPreparing Raw Dose Data\nIn practice, the dose data will need to be combined with other input datasets. This process involves creating a crosswalk between original ID variables and new ID variables. The new ID variables that are required to be the same across all datasets are mod_id, mod_visit, and mod_id_visit. See “2. EHR Vignette for Structured Data” of EHR package and “Build-PK-IV - Comprehensive Workshop” for examples of this process.\nFor simplicity, we will skip this step in this tutorial.\nWe save our dataset as an RDS file using saveRDS as shown below (CSV or RData is also acceptable data form). Here, we create a temporary directory to store the files using tempdir. We define two directories, dataDir for processed data and checkDir containing files used for interactive checking (optional). Instead of using a temporary directory, dataDir and checkDir can be specific directories on your computer.\n\n\n# define 2 directories\ntd <- tempdir()\ndataDir <- file.path(td, 'data') # directory for processed data\ndir.create(dataDir)\ncheckDir <- file.path(td, 'checks') # directory for interactive checking\ndir.create(checkDir)\nsaveRDS(mar.new, file=file.path(dataDir,\"mar_new.rds\"))\n\n\n\nThe next section demonstrates how to use the run_MedStrI function to run the Pro-Med-Str module.\nRunning run_MedStrI()\nIV dose data can be in various forms, which may need to be pre-processed. IV dose data can be obtained from different data sources when using electronic health records (EHRs), but we illustrate this module using an example dataset (called “MAR”) that comes from one data source for simplicity (see “Build-PK-IV - Comprehensive Workshop” for a case when dose data are obtained from two data sources).\nrun_MedStrI() is the main function to process IV dose data in Pro-Med-Str Part I module.\nThe module can be semi-interactive for data checking (although it is not required, we recommend using this feature). If check.path is provided (the default is NULL), it generates several files to check potential data errors and get feedback from an investigator; otherwise, the interactive checking will not be performed. If corrected information (‘fix’ files) are provided, the module should be re-run to incorporate the corrections.\nrun_MedStrI() can take two types of raw IV dose data (e.g., flow data and MAR data). In this tutorial, we describe arguments only relevant to processing one of these datasets, MAR data. A detailed description of all arguments can be found in the EHR package manual of run_MedStrI().\nmar.path: file name of MAR data (CSV, RData, RDS), or data.frame\nmar.columns: a named list that should specify columns in MAR data; ‘id’, ‘datetime’ and ‘dose’ are required. ‘drug’, ‘weight’, ‘given’ may also be specified. ‘datetime’ is date and time for data measurement, which can refer to a single date-time variable (datetime = ‘date_time’) or two variables holding date and time separately (e.g., datetime = c(‘Date’, ‘Time’)). ‘dose’ can also be given as a single variable or two variables. If given as a single column, the column’s values should contain dose and units such as ‘25 mcg’. If given as two column names, the dose column should come before the unit column (e.g., dose = c(‘doseamt’, ‘unit’)). If ‘drug’ is present, the ‘medchk.path’ argument should also be provided, which contain a csv file with a list of drug names that should be used to subset the relevant drugs. The ‘given’ variable should be used in conjunction with the ‘medGivenReq’ argument.\nmedGivenReq: indicator if values in the MAR given column should equal “Given”; if this is FALSE (the default), NA values are also acceptable. This is a variable that flags whether the medication for inpatients is given as sometimes other dose instead of actual dose given can be specified for communications (e.g., a scheduled dose change). Depending on users’ EHR system and data types, we recommend confirming actual dose given and this argument can be useful for that purpose.\nmedchk.path: (optional) file name containing data set (CSV, RData, RDS), or data.frame; should have the column ‘medname’ with list of acceptable drug names used to filter MAR data.\ndemo.list: (optional) demographic information; if available, the output from ‘run_Demo’ or a correctly formatted data.frame; if provided, ‘weight’ is required in demo.columns as it is used to impute weight when missing.\ndemo.columns: a named list that should specify columns in demographic data; ‘id’, ‘datetime’, and ‘weight’ are required.\ncheck.path: (optional) file path where the generated files for data checking are stored, and the corresponding data files with fixed data exist. The default (NULL) will not produce any check files.\n\nAll the following arguments are optional (i.e., default values can be used), but if the required data items for the dose data such as ‘unit’ are not provided, this function does not work.\nfailunit_fn: filename stub for records with units other than those specified with infusion.unit and bolus.unit (default: ‘Unit’)\ninfusion.unit: string specifying units for infusion doses (default: ‘mcg/kg/hr’)\nbolus.unit: string specifying units for bolus doses (default: ‘mcg’)\nbol.rate.thresh: upper bound for retaining bolus doses. Bolus units with a rate above the threshold are dropped (default: Inf; i.e., keep all bolus doses)\nrateunit: string specifying units for hourly rate (default: ‘mcg/hr’)\nratewgtunit: string specifying units for hourly rate by weight (default: ‘mcg/kg/hr’)\nweightunit: string specifying units for weight (default: ‘kg’)\ndrugname: drug name of interest (e.g., dex, fent)\n\nBelow we show how we would run run_MedStrI() using the cleaned IV dose dataset, “mar_new.rds”, as input.\n\n\n# define parameters\ndrugname <- 'fent'\n\nivdose.out <- run_MedStrI(\n    mar.path=file.path(dataDir,\"mar_new.rds\"),\n    mar.columns = list(id='subject_uid', datetime=c('Date','Time'), dose='med:dosage', drug='med:mDrug', given='med:given'),\n    medGivenReq = TRUE,\n    medchk.path = file.path(system.file(\"examples\", \"str_ex2\", package=\"EHR\"), sprintf('medChecked-%s.csv', drugname)),\n    demo.list = NULL,\n    demo.columns = list(),\n    check.path=checkDir, \n    failunit_fn = 'Unit',\n    infusion.unit = 'mcg/kg/hr',\n    bolus.unit = 'mcg',\n    bol.rate.thresh = Inf,\n    rateunit = \"mcg/hr\",\n    ratewgtunit = \"mcg/kg/hr\",\n    weightunit = \"kg\",\n    drugname = drugname\n    )\n\n\nno units other than mcg/kg/hr or mcg, file /var/folders/06/0qv1dr5508j_tbzqdjfqjf680000gn/T//RtmppoZ2WU/checks/failUnit-fent.csv not created\n#########################\n75 rows from 2 subjects with \"kg\" in infusion unit but missing weight, see file /var/folders/06/0qv1dr5508j_tbzqdjfqjf680000gn/T//RtmppoZ2WU/checks/failNoWgt-fent.csv AND create /var/folders/06/0qv1dr5508j_tbzqdjfqjf680000gn/T//RtmppoZ2WU/checks/fixNoWgt-fent.csv\n#########################\n\nAfter run_MedStrI() is executed, it provides messages such as those shown above, which contain some information about data checking.\nOutput of run_MedStrI()\n\n\nhead(ivdose.out)\n\n\n  subject_uid  date.dose infuse.time.real infuse.time infuse.dose          bolus.time bolus.dose given.dose maxint weight\n1    28579217 2011-10-02             <NA>        <NA>          NA 2011-10-02 15:35:00         25         NA      0     NA\n2    28579217 2011-10-02             <NA>        <NA>          NA 2011-10-02 17:26:00         25         NA      0     NA\n3    28579217 2017-02-04             <NA>        <NA>          NA 2017-02-04 16:15:00         50         NA      0     NA\n4    28579217 2017-02-04             <NA>        <NA>          NA 2017-02-04 16:30:00         20         NA      0     NA\n5    28579217 2017-02-04             <NA>        <NA>          NA 2017-02-04 20:57:00         20         NA      0     NA\n6    34161967 2016-07-18             <NA>        <NA>          NA 2016-07-18 14:56:00        100         NA      0     NA\n\nThe output from the Pro-Med-Str - Part I module is a data.frame with the following columns:\nsubject_uid: the new id that will be used to merge datasets.\ndate.dose: dose given date.\ninfuse.time.real: infusion dose time recorded in the raw data.\ninfuse.time: infusion dose time processed based on continuous infusion time.\ninfuse.dose: infusion dose.\nbolus.time: bolus dose time.\nbolus.dose: bolus dose.\ngiven.dose: variable in the raw data stating the dose was given.\nmaxint: infusion recording interval (e.g., 15 min, 60 min).\nweight: subject body weight recorded near infusion time.\n\nNote:\nThis output is the input of run_Build_PK_IV() function in Build-PK-IV module. In the above output, all variables except given.dose are the necessary variables that should be reserved to use run_Build_PK_IV().\nReferences\nChoi L, Beck C, McNeer E, Weeks HL, Williams ML, James NT, Niu X, Abou-Khalil BW, Birdwell KA, Roden DM, Stein CM. Development of a System for Post-marketing Population Pharmacokinetic and Pharmacodynamic Studies using Real-World Data from Electronic Health Records. Clinical Pharmacology & Therapeutics. 2020 Apr;107(4):934-43. doi: 10.1002/cpt.1787.\n\n\n\n",
      "last_modified": "2021-10-04T16:16:10-05:00"
    },
    {
      "path": "Pro-Med-Str-Part2.html",
      "title": "Pro-Med-Str - Part II",
      "description": "This tutorial describes how to process structured medication data, especially focusing on e-prescription data.\n",
      "author": [
        {
          "name": "Elizabeth McNeer",
          "url": {}
        }
      ],
      "contents": "\n\nContents\nIntroduction\nRaw E-Prescription Data\nProcessing the Data\nReferences\n\nHere add links to vignettes\nSee also “Part II: e-prescription data” of “2. EHR Vignette for Structured Data” in EHR package\nIntroduction\nThis tutorial describes how to use the Pro-Med-Str - Part II module in EHRtoPKPD to process structured e-prescription data.\nThe major tasks the module performs are as follows:\nCreating numeric variables for strength, dose, and frequency\nCalculating daily dose\nRemoving duplicate daily doses for a patient\nRaw E-Prescription Data\nTo use this module, all prescriptions must be for only one drug. Different names, such as brand names and generic names, for the same drug are allowed (e.g., Lamictal and lamotrigine). The data used in this module must include columns for ID, date, strength, dose amount, and frequency. If a description column is included, this module will attempt to extract the strength from the description column in cases where the strength is missing.\nBelow is example e-prescription data from the EHR package including columns for ID, drug name, dose, frequency, date, strength, and description.\n\n\nrawDataDir <- system.file(\"examples\", \"str_ex2\", package=\"EHR\")\n(eRX <- read.csv(file.path(rawDataDir,\"e-rx_DATA.csv\"),stringsAsFactors = FALSE))\n\n\n  GRID    MED_NAME   RX_DOSE             FREQUENCY ENTRY_DATE STRENGTH_AMOUNT                                        DESCRIPTION\n1  ID1 lamotrigine         1                   bid 2009-02-24             100 lamotrigine 100 mg tablet (Also Known As Lamictal)\n2  ID2 lamotrigine         2                   bid 2006-12-30             100 lamotrigine 100 mg tablet (Also Known As Lamictal)\n3  ID2    Lamictal         1                   bid 2006-12-30             200                             LaMICtal 200 mg tablet\n4  ID3 Lamictal XR         3                   bid 2004-08-24                                       Lamictal XR 100 mg 24 hr Tab\n5  ID4 lamotrigine         1           twice a day 2010-05-22          200 mg lamotrigine 200 mg tablet (Also Known As Lamictal)\n6  ID5 lamotrigine    2 tabs                   qam 2007-06-13             200         LaMICtal XR 200 mg tablet,extended release\n7  ID6 lamotrigine 1.5+1+1.5 brkfst, lunch, dinner 2015-03-14             100 lamoTRIgine 100 mg tablet (Also Known As Lamictal)\n\nTo get a daily dose for each patient, we multiply strength*dose*frequency. In order to do this, the STRENGTH_AMOUNT, RX_DOSE, and FREQUENCY variables need to be converted to numeric. Strengths that include units will have the units removed (e.g., numeric strength for ID4 will be 200), frequencies will be converted to the equivalent number of times per day that the medication is taken (e.g., bid = 2, twice a day = 2, qam = 1), and doses will have words like “tabs” removed (e.g., numeric dose for ID5 will be 2). For ID6, separate doses are written for breakfast, lunch, and dinner, so the numeric dose will be 4 (1.5+1+1.5), and the daily dose will be calculated as strength*dose. ID3 is missing a value for STRENGTH_AMOUNT, but we can use the strength that is present in the DESCRIPTION column. In the next section, we show how the run_MedStrII function in the EHR package takes care of all of these tasks for us and calculates a daily dose.\nProcessing the Data\nWe begin by loading the EHR package.\n\n\nlibrary(EHR)\n\n\n\nThe e-prescription data can be processed by the run_MedStrII function using:\n\n\neRX.out <- run_MedStrII(file.path(rawDataDir,\"e-rx_DATA.csv\"),\n    select = c('GRID','MED_NAME','RX_DOSE','FREQUENCY','ENTRY_DATE','STRENGTH_AMOUNT','DESCRIPTION'),\n    rename = c('ID','MED_NAME','RX_DOSE','FREQUENCY','ENTRY_DATE','STRENGTH_AMOUNT','DESCRIPTION'))\n\n\n\nThe following arguments are used in the run_MedStrII function:\nfile: file name of prescription data\nselect: the names of the columns to select\nrename: new column names; the default are the names required for the underlying functions, processErx and processErxAddl\n\n\neRX.out\n\n\n   ID    MED_NAME   RX_DOSE             FREQUENCY ENTRY_DATE STRENGTH_AMOUNT                                        DESCRIPTION strength\n1 ID1 lamotrigine         1                   bid 2009-02-24             100 lamotrigine 100 mg tablet (also known as lamictal)      100\n2 ID2 lamotrigine         2                   bid 2006-12-30             100 lamotrigine 100 mg tablet (also known as lamictal)      100\n4 ID3 Lamictal XR         3                   bid 2004-08-24                                       lamictal xr 100 mg 24 hr tab      100\n5 ID4 lamotrigine         1           twice a day 2010-05-22          200 mg lamotrigine 200 mg tablet (also known as lamictal)      200\n6 ID5 lamotrigine    2 tabs                   qam 2007-06-13             200         lamictal xr 200 mg tablet,extended release      200\n7 ID6 lamotrigine 1.5+1+1.5 brkfst, lunch, dinner 2015-03-14             100 lamotrigine 100 mg tablet (also known as lamictal)      100\n  freq.standard freq.num dose daily.dose       date num_doses num_freqs\n1           bid        2    1        200 2009-02-24        NA        NA\n2           bid        2    2        400 2006-12-30        NA        NA\n4           bid        2    3        600 2004-08-24        NA        NA\n5           bid        2    1        400 2010-05-22        NA        NA\n6            am        1    2        400 2007-06-13        NA        NA\n7           tid        3    4        400 2015-03-14         3         3\n\nIn the above example, daily dose was calculated for the first 5 patients by multiplying strength*dose*freq.num, and a redundant daily dose was removed for the patient with ID2. In order to calculate a daily dose for the patient with ID3, the strength of 100 from the description was used because STRENGTH_AMOUNT was missing. For the patient with ID6, the dose amounts of 1.5, 1, and 1.5 are added together to get a dose of 4, and the daily dose is calculated as strength*dose.\nReferences\nChoi L, Beck C, McNeer E, Weeks HL, Williams ML, James NT, Niu X, Abou-Khalil BW, Birdwell KA, Roden DM, Stein CM. Development of a System for Post-marketing Population Pharmacokinetic and Pharmacodynamic Studies using Real-World Data from Electronic Health Records. Clinical Pharmacology & Therapeutics. 2020 Apr;107(4):934-43. doi: 10.1002/cpt.1787.\n\n\n\n",
      "last_modified": "2021-09-30T09:15:44-05:00"
    },
    {
      "path": "workshops.html",
      "title": "*EHRtoPKPD* Workshops",
      "description": "The tutorial series demonstrate how to use the *EHRtoPKPD* with some examples in EHR package.\n",
      "author": [],
      "contents": "\n\nContents\nModulesExtract-Med\nPro-Med-NLP\nPro-Demographic\nPro-Drug Level\nPro-Laboratory\nPro-Med-Str : Part I\nPro-Med-Str : Part II\nBuild-PK-Oral\nBuild-PK-IV : Simple\nBuild-PK-IV : Comprehensive\n\nPopulation PK/PD Data FormatPK Data for Oral Dosing\nPK Data for IV Dosing\n\n\nNote:\nAs this package is still in active development, we recommend installing from our GitHub repository with the following command: devtools::install_github(‘choileena/EHR/EHR/’)\nSome workshops are under construction.\nModules\nExtract-Med\nThis tutorial describes how to obtain drug dosing information from unstructured clinical notes using Extract-Med module in the system.\nPro-Med-NLP\nThis tutorial describes how to build longitudinal medication dose data from the raw output of an NLP system using the Pro-Med-NLP module.\nPro-Demographic\nThis tutorial describes how to process demographic data using Pro-Demographic module in the system.\nPro-Drug Level\nThis tutorial describes how to process drug concentration data using Pro-Drug Level module in the system.\nPro-Laboratory\nThis tutorial describes how to process laboratory data using Pro-Laboratory module in the system.\nPro-Med-Str : Part I\nThis tutorial describes how to process structured medication data, especially focusing on intravenously given dose data.\nPro-Med-Str : Part II\nThis tutorial describes how to process structured medication data, especially focusing on e-prescription data.\nBuild-PK-Oral\nThis tutorial describes the PK data building procedure in the EHRtoPKPD for medications that are typically orally administrated. It demonstrates how to quickly build PK data using Build-PK-Oral when drug dose data are provided by users or generated from unstructured clinical notes using extracted dosing information with the Extract-Med module and processed with the Pro-Med-NLP module in the system.\nBuild-PK-IV : Simple\nThis tutorial describes a simple PK data building procedure in the EHRtoPKPD for medications that are typically intravenously administrated. It demonstrates how to quickly build PK data using Build-PK-IV without using the data processing modules when cleaned data for concentration, drug dose, demographic and laboratory datasets are already available in an appropriate data form.\nBuild-PK-IV : Comprehensive\nThis tutorial describes a comprehensive PK data building procedure in the EHRtoPKPD for medications that are typically intravenously administrated. It demonstrates how to utilize several data processing modules (e.g., Pro-Demographic, Pro-Med-Str, Pro-Drug Level, Pro-Laboratory) to standardize and combine more complex datasets when cleaned data are not available, and then build PK data using Build-PK-IV.\nPopulation PK/PD Data Format\nSoftware performing population PK/PD modeling typically requires specific data format for the key variables. Most of these software follows the data requirement for NONMEM, as NONMEM has been used for a long time and considered as the gold standard software to perform population PK/PD analysis. We describe two most commonly used data format in population PK/PD modeling.\nPK Data for Oral Dosing\nThis tutorial describes an example data format typically used in population PK modeling for orally administered medications.\nPK Data for IV Dosing\nThis tutorial describes an example data format typically used in population PK modeling for intravenously administrated medications.\nUnder construction.\n\n\n\n",
      "last_modified": "2021-10-04T14:47:03-05:00"
    }
  ],
  "collections": []
}
